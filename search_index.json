[["index.html", "Fall 2024 Semester 1 Welcome to SDS 313", " Fall 2024 Semester Dr Layla Guyot 2024-12-03 1 Welcome to SDS 313 This is the combination of all my notes for SDS 313! "],["02_VisualizingData.html", "2 Visualizing and Describing Data 2.1 Import Dataset 2.2 Summarizing one variable 2.3 Group Practice 2.4 Summarizing two variables (bivariate relationship) 2.5 Group Practice", " 2 Visualizing and Describing Data In this worksheet, we will: Choose how to plot different types of data with basic R plots Report univariate and bivariate descriptive statistics Include titles and labels to our plots We will be working with R Markdown files during lectures throughout the rest of the semester (you will learn to make our own in a couple of weeks). The advantage of a R Markdown document is that it incorporates R code in chunks within the text. Hit the run button (little green triangle) in the upper right to see this in action: # Run this code chunk 5+1+2 ## [1] 8 2.1 Import Dataset The default working directory of any R Markdown file will be the folder where it is saved. Always make sure that your dataset is in the same folder as the R Markdown file, so you won’t need need to worry about file paths: med &lt;- read.csv(&#39;medicaldata.csv&#39;) What code can we use to get familiar with the structure of this dataset? What type of variables does it contain? # Explore the structure of this dataset str(med) ## &#39;data.frame&#39;: 155 obs. of 9 variables: ## $ Subject : int 1 2 3 4 5 6 7 8 9 10 ... ## $ Age : int 56 70 54 38 55 53 42 53 45 64 ... ## $ Diabetic : int 1 0 0 1 1 1 1 0 0 1 ... ## $ Edema : int 0 1 1 0 0 0 0 0 0 0 ... ## $ Cholesterol: int 302 176 244 279 322 280 562 259 281 231 ... ## $ Glucose : int 148 85 89 78 197 166 118 103 126 119 ... ## $ BP : int 72 66 66 50 70 72 84 52 88 80 ... ## $ BMI : num 33.6 26.6 28.1 31 30.5 25.8 45.8 43.3 39.3 29 ... ## $ Platelet : int 221 151 183 136 204 373 251 258 244 295 ... We can also take a quick look at descriptive statistics for all variables in the dataset: # Summarize all variables in the dataset summary(med) ## Subject Age Diabetic Edema ## Min. : 1.0 Min. :28.0 Min. :0.0000 Min. :0.00000 ## 1st Qu.: 39.5 1st Qu.:41.0 1st Qu.:0.0000 1st Qu.:0.00000 ## Median : 78.0 Median :48.0 Median :0.0000 Median :0.00000 ## Mean : 78.0 Mean :48.9 Mean :0.3613 Mean :0.07097 ## 3rd Qu.:116.5 3rd Qu.:56.0 3rd Qu.:1.0000 3rd Qu.:0.00000 ## Max. :155.0 Max. :78.0 Max. :1.0000 Max. :1.00000 ## Cholesterol Glucose BP BMI ## Min. : 120.0 Min. : 71 Min. :44.00 Min. :19.40 ## 1st Qu.: 249.0 1st Qu.: 99 1st Qu.:64.00 1st Qu.:27.95 ## Median : 302.0 Median :111 Median :70.00 Median :31.60 ## Mean : 361.2 Mean :119 Mean :71.18 Mean :32.91 ## 3rd Qu.: 399.5 3rd Qu.:136 3rd Qu.:79.00 3rd Qu.:37.00 ## Max. :1775.0 Max. :197 Max. :98.00 Max. :55.20 ## Platelet ## Min. : 70.0 ## 1st Qu.:203.5 ## Median :265.0 ## Mean :272.6 ## 3rd Qu.:335.0 ## Max. :563.0 The units for the variables are: Age (years), Cholesterol (mg/dL), Glucose (mg/dL), BP (mmHg), BMI (kg/m^2), Platelet (count in thousands). 2.2 Summarizing one variable 2.2.1 One Categorical Variable A categorical variable defines membership in a group. When describing categorical variables, we pay attention to which category are the most and least common. # Frequencies of each category of Diabetic table(med$Diabetic) ## ## 0 1 ## 99 56 # Proportions of each category of Diabetic (relative to total) prop.table(table(med$Diabetic)) ## ## 0 1 ## 0.6387097 0.3612903 # Represent frequencies with bars barplot(table(med$Diabetic)) What do 0 and 1 represent though? We could choose to label the categories: # Change the labels of the categories med$Diabetic &lt;- factor(med$Diabetic, labels = c(&#39;No&#39;,&#39;Yes&#39;)) # Update bar plot barplot(table(med$Diabetic)) Tip: we should always add a title and labels to our plot to ensure that there is enough information about the data being presented. # A better version of the bar plot barplot(table(med$Diabetic), # add a title main = &#39;Frequency of Diabetic Status&#39;, # add labels to the axes xlab = &#39;Diabetic Status&#39;, ylab = &#39;Frequency of Patients&#39;, # adjust limits to the y-axis ylim = c(0,100), # adjust colors of the bars col=c(&#39;aquamarine&#39;,&#39;purple&#39;)) In summary, for 1 categorical variable: Describe with: frequencies or proportions Display with: bar plot 2.2.2 One Numeric Variable A numeric variable is a quantitative measurement. When describing numeric variables, we pay attention to what a typical value is (center) and how the values vary from each other (spread), what values are most common and what values are rare. # Represent numeric values in bins with a histrogram hist(med$Cholesterol) In statistics, center is a measure that represents a typical value for a numeric variable (we typically report the mean or median). The mean is the arithmetic average of the numeric values: it is the sum of all data values divided by the number of observations. The median splits the data in two halves: into the lowest 50% values and the highest 50% values. # Compare the values of mean and median mean(med$Cholesterol) ## [1] 361.1613 median(med$Cholesterol) ## [1] 302 Since, usually, not all values are the same, we should also report the spread of a numeric variable. In statistics, we usually use standard deviation or the five-number summary. The standard deviation is the average distance between each data point and the mean of the dataset. In the five-number summary, the first quartile, Q1, separates the data from the lowest 25% values and the third quartile, Q3, separate the data from the highest 25% values). # Compare the values of sd vs Q1 and Q3 sd(med$Cholesterol) ## [1] 221.0252 fivenum(med$Cholesterol) ## [1] 120.0 249.0 302.0 399.5 1775.0 # Represent the five-number summary with a boxplot boxplot(med$Cholesterol) Tip: we can use some options to improve our plots with more options. # A better version of the boxplot boxplot(med$Cholesterol, # add a title main = &#39;Boxplot of Cholesterol&#39;, # add labels to the axes xlab = &#39;Cholesterol (mg/dL)&#39;, # adjust colors of the box col = &#39;lightgreen&#39;, # adjust the appearance of the points pch = 20, # make the boxplot horizontal horizontal = TRUE) In summary, for 1 numeric variable: Describe with: Center: mean or median Spread: standard deviation or quartiles Display with: histogram or boxplot 2.3 Group Practice Pick a variable from this dataset (other than Diabetic or Cholesterol). Describe and display its distribution with an appropriate plot. Change the default color of your plot and update the title and axis labels. Post your graph on your group’s slide here. # Group practice plot: 2.4 Summarizing two variables (bivariate relationship) 2.4.1 Two Numeric Variables When comparing two numeric variables, we may wonder if high values on one variable are associated with high/low values for another variable. Correlation describes the strength of a (linear) relationship between two variables. With the function cor, we refer by default to the Pearson correlation coefficient which takes values between -1 (strong negative correlation) and 1 (strong positive correlation) with 0 indicating that there is no correlation. # Find the correlation coefficient cor(med$BMI,med$BP) ## [1] 0.4296074 # Represent relationship with a scatterplot plot(med$BMI,med$BP) Tip: we can use some options to improve our scatterplots. # A better version of the bar plot plot(med$BMI,med$BP, # add a title main = &#39;Relationship between BMI and Blood Pressure&#39;, # add labels to the axes xlab = &#39;BMI (kg/m^2)&#39;, ylab = &#39;Blood Pressure (mmHg)&#39;, # adjust appearance of points pch = 20) In summary, with 2 numeric variables: Describe with: correlation Display with: scatterplot 2.4.2 One Numeric and One Categorical Variable When comparing a numeric variable for different categories, we may wonder if the distribution of the numeric variable (center, spread) is about the same across all categories or not. # Compare means aggregate(BP ~ Diabetic, data = med, mean) # What about the standard deviations of each group? aggregate(BP ~ Diabetic, data = med, sd) # Compare distributions with a grouped boxplot boxplot(med$BP~med$Diabetic, main = &#39;Diastolic Blood Pressure&#39;, ylab = &#39;Blood Pressure (mg/dL)&#39;, xlab = &#39;Diabetic Status&#39;, col = c(&#39;blue&#39;,&#39;red&#39;)) # Create subsets for each Diabetic group: Diabetic &lt;- med[med$Diabetic == &quot;Yes&quot;,] NonDiabetic &lt;- med[med$Diabetic == &quot;No&quot;,] # Then make a histogram for each group (use same limits on the axes) hist(Diabetic$BP, main=&#39;Histogram of Blood Pressure for Diabetic Patients&#39;, xlab=&#39;Blood Pressure (mmHg))&#39;, col=&#39;lightgreen&#39;, ylim=c(0,25), xlim=c(40,100)) hist(NonDiabetic$BP, main=&#39;Histogram of Blood Pressure for Non-Diabetic Patients&#39;, xlab=&#39;Blood Pressure (mmHg))&#39;, col=&#39;lightblue&#39;, ylim=c(0,25), xlim=c(40,100)) In summary, with 1 numeric variable and 1 categorical variable: Describe with: compare center and spread of each group Display with: grouped histogram or grouped boxplot 2.4.3 Two Categorical Variables When comparing two categorical variables, we may wonder what are the most and least common categories of one variable across categories of the other variable. Let’s label the Edema status variable like we did for Diabetic status: # Change the labels of the categories med$Edema &lt;- factor(med$Edema, labels=c(&#39;No&#39;,&#39;Yes&#39;)) # Build a contingency table table(med$Edema, med$Diabetic, dnn = c(&quot;Edema&quot;, &quot;Diabetic&quot;)) ## Diabetic ## Edema No Yes ## No 89 55 ## Yes 10 1 # Two ways to look at proportions prop.table(table(med$Edema, med$Diabetic, dnn = c(&quot;Edema&quot;, &quot;Diabetic&quot;)), 1) # rows ## Diabetic ## Edema No Yes ## No 0.61805556 0.38194444 ## Yes 0.90909091 0.09090909 prop.table(table(med$Edema, med$Diabetic, dnn = c(&quot;Edema&quot;, &quot;Diabetic&quot;)), 2) # columns ## Diabetic ## Edema No Yes ## No 0.89898990 0.98214286 ## Yes 0.10101010 0.01785714 # Compare Edema status for Diabetic vs Non-Diabetic barplot(table(med$Edema, med$Diabetic), main = &#39;Diabetes and Edema Status&#39;, xlab = &#39;Diabetic Status&#39;, ylab = &#39;Frequency&#39;, col = c(&#39;lightcoral&#39;,&#39;lightgreen&#39;), legend = TRUE) # Add a legend legend(&quot;topright&quot;, legend = c(&quot;No&quot;, &quot;Yes&quot;), fill = c(&#39;lightcoral&#39;,&#39;lightgreen&#39;), title = &quot;Edema Status&quot;) # Compare Edema status for Diabetic vs Non-Diabetic, relatively barplot(prop.table(table(med$Edema, med$Diabetic),2), main = &#39;Diabetes and Edema Status&#39;, ylab = &#39;Proportion&#39;, xlab = &#39;Edema Status&#39;, col = c(&#39;lightcoral&#39;,&#39;lightgreen&#39;), legend = TRUE) In summary, with 2 categorical variables: Describe with: row or column proportions Display with: two-way frequency table or grouped bar chart 2.5 Group Practice Pick a variable that might be related to Saliva Glucose Level (Glucose). Describe and display the bivariate relationship. Add your graph on your group’s slide here. # Group practice plot: Here are some other resources that can help make your base R plots look nicer: Graph parameters Color list Nice color palettes "],["03_MoreVisualization.html", "3 More Visualizing and Describing Data 3.1 Import Dataset 3.2 Creating plots with ggplot 3.3 Group Practice 3.4 Layering 3.5 Group Practice 3.6 Exporting a graph", " 3 More Visualizing and Describing Data In this worksheet, we will: Create plots with many different options using ggplot Consider different themes and scales Export our graphs as a pdf file A very popular graphics package that can make it easier to create nice looking graphs is ggplot2. Let’s check that we have the necessary package installed: library(ggplot2) The code for ggplot functions looks a little different than base R plots. 3.1 Import Dataset The following data was collected at Baystate Medical Center, Springfield, MA in 1986. birthwt &lt;- read.csv(&#39;birthwt.csv&#39;) Variable Description low Indicator of birth weight less than 2.5 kg age Mother’s age (years) lwt Mother’s weight (lbs) race Mother’s race (1 = white, 2 = black, 3 = other). smoke Smoking status during pregnancy ptl Number of previous premature labors ht History of hypertension ui Presence of uterine irritability ftv Number of physician visits during the first trimester bwt Birth weight (grams) What code can we use to get familiar with the dataset? # Get familiar with the dataset str(birthwt) ## &#39;data.frame&#39;: 189 obs. of 10 variables: ## $ low : chr &quot;no&quot; &quot;no&quot; &quot;no&quot; &quot;no&quot; ... ## $ age : int 19 33 20 21 18 21 22 17 29 26 ... ## $ lwt : int 182 155 105 108 107 124 118 103 123 113 ... ## $ race : chr &quot;black&quot; &quot;other&quot; &quot;white&quot; &quot;white&quot; ... ## $ smoke: chr &quot;no&quot; &quot;no&quot; &quot;yes&quot; &quot;yes&quot; ... ## $ ptl : chr &quot;no&quot; &quot;no&quot; &quot;no&quot; &quot;no&quot; ... ## $ ht : chr &quot;no&quot; &quot;no&quot; &quot;no&quot; &quot;no&quot; ... ## $ ui : chr &quot;yes&quot; &quot;no&quot; &quot;no&quot; &quot;yes&quot; ... ## $ ftv : chr &quot;none&quot; &quot;two or more&quot; &quot;one&quot; &quot;two or more&quot; ... ## $ bwt : int 2523 2551 2557 2594 2600 2622 2637 2637 2663 2665 ... summary(birthwt) ## low age lwt ## Length:189 Min. :14.00 Min. : 80.0 ## Class :character 1st Qu.:19.00 1st Qu.:110.0 ## Mode :character Median :23.00 Median :121.0 ## Mean :23.24 Mean :129.8 ## 3rd Qu.:26.00 3rd Qu.:140.0 ## Max. :45.00 Max. :250.0 ## race smoke ptl ## Length:189 Length:189 Length:189 ## Class :character Class :character Class :character ## Mode :character Mode :character Mode :character ## ## ## ## ht ui ftv ## Length:189 Length:189 Length:189 ## Class :character Class :character Class :character ## Mode :character Mode :character Mode :character ## ## ## ## bwt ## Min. : 709 ## 1st Qu.:2414 ## Median :2977 ## Mean :2945 ## 3rd Qu.:3487 ## Max. :4990 head(birthwt) 3.2 Creating plots with ggplot 3.2.1 Define a plot The ggplot() function helps us build a plot. Within this function, we specify the dataframe to explore: # Create a ggplot bw_ggplot &lt;- ggplot(birthwt) # How does the plot looks like? bw_ggplot It’s empty because we haven’t specified how to represent the variables! We need to represent variables by mapping them with a geometric object using aes(). The type of geometric object depends on the type of data. # 1 numeric variable bw_ggplot + geom_histogram(aes(x = bwt)) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. bw_ggplot + geom_boxplot(aes(x = bwt)) # 1 categorical variable bw_ggplot + geom_bar(aes(x = smoke)) # 2 numeric variables bw_ggplot + geom_point(aes(x = lwt, y = bwt)) 3.2.2 More on histograms When looking at the histogram of the birth weight, can you tell which range of values is the most common? bw_ggplot + geom_histogram(aes(x = bwt)) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. See the message: by default, the number of bins is 30 in ggplot. Let’s adjust that: bw_ggplot + geom_histogram(aes(x = bwt), # Set bin width and center (half of the bin width) binwidth = 1000, center = 500) Try some different bin widths! Note how the general shape of the histogram might change depending on how we define the bins. We usually recommend to have at least 10 different bins to be able to “see” the variation in our data. bw_ggplot + geom_histogram(aes(x = bwt), # Set bin width and center (half of the bin width) binwidth = 100, center = 50) bw_ggplot + geom_histogram(aes(x = bwt), # Set bin width and center (half of the bin width) binwidth = 500, center = 250) bw_ggplot + geom_histogram(aes(x = bwt), # Set bin width and center (half of the bin width) binwidth = 10, center = 5) 3.2.3 Map to color, shape, size We can change customize colors on our plot (outside of the aesthetics): # What does color vs fill do? bw_ggplot + geom_histogram(aes(x = bwt), color = &quot;blue&quot;, fill = &quot;orange&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. bw_ggplot + geom_boxplot(aes(x = bwt), color = &quot;blue&quot;, fill = &quot;orange&quot;) bw_ggplot + geom_bar(aes(x = smoke), color = &quot;blue&quot;, fill = &quot;orange&quot;) bw_ggplot + geom_point(aes(x = lwt, y = bwt), color = &quot;blue&quot;, fill = &quot;orange&quot;) # What does shape vs size vs alpha do? bw_ggplot + geom_point(aes(x = lwt, y = bwt), shape = 2) bw_ggplot + geom_point(aes(x = lwt, y = bwt), size = 10) bw_ggplot + geom_point(aes(x = lwt, y = bwt), alpha = 0.1) All these options only change the general appearance of the graph but we can change the appearance of some part of the graph by mapping variables to other types of aesthetics: # Adjust color by the categories of a variable bw_ggplot + geom_point(aes(x = lwt, y = bwt, color = smoke)) # Adjust shape by the categories of a variable bw_ggplot + geom_point(aes(x = lwt, y = bwt, shape = low)) # Adjust size by the numeric values of a variable bw_ggplot + geom_point(aes(x = lwt, y = bwt, size = age)) # All at once! bw_ggplot + geom_point(aes(x = lwt, y = bwt, color = smoke, shape = low, size = age)) Note: adding too many variables to a single plot can make it too difficult to interpret! 3.3 Group Practice Does smoking during pregnancy affects birth weight? Make a plot to display the relationship between these two variables. Post your graph on your group’s slide here. # Group practice plot: A special case for representing 2 categorical variables: bw_ggplot + geom_bar(aes(x = smoke, fill = low)) bw_ggplot + geom_bar(aes(x = smoke, fill = low), position = &quot;fill&quot;) Does the label on the last y-axis make sense? Let’s see how to fix it! 3.4 Layering We can add more layers to our plot by adding other components with +. 3.4.1 Adding labels Remember to always add labels to your plots: bw_ggplot + geom_bar(aes(x = smoke, fill = low), position = &quot;fill&quot;) + # Add labels labs( # Title title = &quot;Impact of smoking status on birth weight&quot;, # Caption with source of data caption = &quot;Data obtained from Baystate Medical Center, Springfield, MA in 1986&quot;, # Label x-axis and y-axis x = &quot;The mother smoked during pregnancy&quot;, y = &quot;Proportion&quot;, # Legend of color fill = &quot;Baby was born with a low birth weight&quot;) 3.4.2 Controlling scales We can adjust the limits on the axes: bw_ggplot + geom_point(aes(x = lwt, y = bwt)) + xlim(c(0,250)) + ylim(c(0,5000)) We can set specific tick marks for better readability: bw_ggplot + geom_histogram(aes(x = bwt), binwidth = 500, center = 250, color = &quot;blue&quot;, fill =&quot;orange&quot;) + # Adjust the tick marks of the x-axis scale_x_continuous(limits = c(0,5000), breaks = seq(0,5000,500)) Or instead remove unnecessary scale on one axis: bw_ggplot + geom_boxplot(aes(x = bwt)) + scale_y_continuous(labels = NULL) 3.4.3 Faceting We can produce a plot for each category of a variable with faceting: bw_ggplot + geom_histogram(aes(x = bwt)) + facet_wrap(~ftv) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. # or for better comparisons bw_ggplot + geom_histogram(aes(x = bwt)) + facet_wrap(~ftv, nrow = 3) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 3.4.4 Looking for trends We can look for trends in our data: # General trend bw_ggplot + geom_point(aes(x = lwt, y = bwt)) + geom_smooth(aes(x = lwt, y = bwt)) ## `geom_smooth()` using method = &#39;loess&#39; and formula = &#39;y ~ x&#39; # Linear trend bw_ggplot + geom_point(aes(x = lwt, y = bwt)) + geom_smooth(aes(x = lwt, y = bwt), method = &quot;lm&quot;, se = FALSE) + # Add lines representing means geom_vline(xintercept = mean(birthwt$lwt), color = &quot;green&quot;) + geom_hline(yintercept = mean(birthwt$bwt), color = &quot;orange&quot;) ## `geom_smooth()` using formula = &#39;y ~ x&#39; # Smooth histogram bw_ggplot + geom_density(aes(x = bwt)) # Smooth boxplots bw_ggplot + geom_violin(aes(x = bwt, y = smoke)) 3.4.5 Palettes and themes We can customize many aspects of our graphs by hand (colors, scales, background color, grid, …) or we can use some themes or palettes other than the defaults. If you want to get rid of classic “gray box” background: bw_ggplot + geom_point(aes(x = lwt, y = bwt)) + theme_classic() We can use some specific palettes from the color brewer that are color-blind friendly: library(RColorBrewer) display.brewer.all(colorblindFriendly = TRUE) bw_ggplot + geom_bar(aes(x = smoke, fill = low)) + scale_fill_brewer(palette = &#39;Set2&#39;) These palettes only works for a limited number of colors. What if we color our data with a numeric variable: bw_ggplot + geom_point(aes(x = lwt, y = bwt, color = age)) + scale_color_gradient(low = &quot;lightblue&quot;, high = &quot;darkblue&quot;) 3.5 Group Practice Within your group, pick one of the following question to answer with a plot: Is smoking during pregnancy associated with a low birth weight (&lt; 2.5 kg)? Is a history of hypertension associated with the presence of uterine irritability? Is the mother’s age associated with more physician visits during the first trimester? Come up with your own! Make an appropriate plot to answer the question. Adjust the default labels and colors. Post your graph on your group’s slide here. # Group practice plot: 3.6 Exporting a graph You can use RStudio’s user-friendly buttons to export plots, or use code. If using code, exporting a graph takes 3 steps: Naming a file to write to. Running the graph function(s). Closing the file. # Where is this plot saved to? jpeg(&#39;mygraph.jpeg&#39;) bw_ggplot dev.off() ## png ## 2 Here are some other resources that can help make your ggplots look nicer: Function reference R Cookbook ggplot Cheat sheet "],["04_RMarkdown.html", "4 R Markdown 4.1 YAML metadata 4.2 Text editing 4.3 Embedded R code 4.4 Group Practice", " 4 R Markdown In this worksheet, we will: Understand the source of .Rmd files Play around with advanced markdown edits Include code to investigate a dataset Knit .html reports Here are some examples of knitted R Markdown files: Our textbook, using “bookdown” The “handouts” from the second week of class .pdf articles We will discuss the structure of the R Markdown file with YAML metadata, text editing, and embedded code. 4.1 YAML metadata The settings and parameters controlling the appearance and structure of the document are defined at the top of the file, enclosed by triple dashes ---. This metadata provides key information about the document, such as the title, author, output format, with sometimes other settings like table of contents, theme, and code chunk options. 4.2 Text editing Let’s try out basic Markdown features with different headers, numbered or bulleted lists, bold or italic text, … 4.2.1 a. Headers 4.2.2 For 4.2.3 Example 4.2.4 These 4.2.4.1 Are 4.2.4.1.1 Different 4.2.4.1.1.1 Headers ######Does not knit as a header Make sure to leave a space after #’s so that they are interpreted as headers. Similarly, leave a blank line between sections. 4.2.5 Text formatting You can use some basic formatting to highlight some part of the text: bold, italic, or bold and italic strikethrough text Create a blockquote To refer to R objects (variables, datasets, functions, …) within the text, we usually use the slanted quotes. Remember the ggplot() function? 4.2.6 Lists and bullet points Create a list: Here Are Four Things Or some bullet points: bullet 1 sub-bullet 1 bullet 2 sub-bullet 2 bullet 3 sub-bullet 3 4.2.7 HTML hyperlinks, images, tables, formulas, etc. We can include external links and images: Here is a hyperlink to Canvas Below is an image from a URL (for local images, just specify the file path in place of the URL): We can format tables: Tuesday Thursday Introduce R Markdown Create your own R Markdown And here is a math formula: \\[mean(X) = \\frac{\\sum x_i}{n}\\] Note: text editing is fairly easy to do with the Visual mode: it works more like a standard text editor. 4.3 Embedded R code The advantage of a R Markdown document is that it incorporates R code in chunks within the text. Code chunks will be executed when knitting and the output will be shown in the output file (usually a html output in this course). # We already tried this! 5+1+2 ## [1] 8 4.3.1 Packages and R objects R Markdown is designed to be independent of the R workspace and each time you knit, it acts like it starts with a clean R session. All packages should be loaded and all objects used in the code should be created within the document. # Load functions from the ggplot2 package library(ggplot2) When importing a dataset, make sure it is in the same folder as the R Markdown file so you do not have to worry about specifying a path: # Import a dataset library(readr) films &lt;- read_csv(&quot;films.csv&quot;) ## Rows: 151 Columns: 11 ## ── Column specification ────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (4): Title, Studio, Genre, Rating ## dbl (7): Year, Gross, PercentDomestic, Rotten, IMDB, Days, Budget ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. Take a quick look at the dataset: head(films) 4.3.2 Options for code chunks We can choose to evaluate, or not, a code chunk when knitting with eval =: # There is an error in this code, can you fix it? hist(films$Rotten) Note: R Markdown does not knit if there is an error in any code chunk. We can also choose to hide, or not, a code chunk when knitting with echo =: 4.3.3 Inline code You can also execute code within text! For example, in the films dataset, the mean value of IMDB is 7.0350993 or 7.04 when rounded by 2 decimals. 4.4 Group Practice Within your group, pick one of the following question to investigate: Is there a difference in review ratings across the different genres? Is there a relationship between the two types of review ratings? Is there a difference in review ratings across the different studios? Come up with your own! Then investigate the question by: Making an appropriate plot Reporting appropriate statistics formatted in a table Writing a sentence in bold to interpret your findings Finally, knit this R Markdown file and take a screenshot including the plot, table, and sentence to post it on your group’s slide here. # Group practice code: Check out the RMarkdown Cheat sheet for more practice! "],["05_MoreRMarkdown.html", "5 More R Markdown 5.1 More YAML metadata 5.2 More code chunk options 5.3 Format tables 5.4 Knitting into different formats 5.5 Group Practice", " 5 More R Markdown In this worksheet, we will: Discuss more advanced metadata and code chunk options Use the results of our code to format tables Knit into other formats such as pdf, word, or slides Create your own R Markdown file We will discuss the structure of the R Markdown file with YAML metadata, text editing, and embedded code. 5.1 More YAML metadata There are many different options added at the top of the document compared to last time! Note that the options after hmtl_document: are exclusively for hmtl outputs. For example, the toc options add a table of contents. 5.2 More code chunk options We can control some global options for the code chunks at the beginning of the document: We could still set different options for each code chunk. For example, hide the following code chunk: 5.3 Format tables Sometimes the outputs of our code are nice enough that they could be formatted into tables directly with kable(): # Compare means of IMDB across genres knitr::kable( # Table to show: median for each genre with aggregate aggregate(IMDB ~ Genre, data = films, FUN = median), # Options for the table col.names = c(&quot;Movie Genres&quot;, &quot;Median IMDB&quot;), digits = 1 ) Movie Genres Median IMDB Action/Adventure 7.1 Animation 7.0 Comedy 6.6 Drama 7.6 For even more options, you could use the kableExtrapackage. Check out the R Documentation for more details! 5.4 Knitting into different formats Let’s try generating other types of output. Click on File &gt; New File &gt; R Markdown then choose one of the following options: Document: HMTL, PDF, Word Presentation: any of these options Note that: inserting \\newpage or \\pagebreak to add a new page for pdf or word documents respectively while the headers ## define a new slide for the presentation. 5.5 Group Practice You will explore the shelter dataset, containing information about a sample of cats and dogs that arrived at the Austin Animal Center (data obtained from the City of Austin data portal). Within your group: Create your own R Markdown file and save it as Group_*yournumber*. Change the title and add all contributors as authors. Import the shelter dataset, briefly introduce the data and cite its source. Include a cute picture of cats/dogs that you found online (or if you have cats/dogs, include a picture of your own!). Take a quick look at the data. Come up with a data question involving at least two variables from this dataset. Write a sentence or two to interpret your findings. Knit your R Markdown file in different formats. Upload your favorite output here. "],["06_DataWrangling.html", "6 Data Wrangling 6.1 Dataset and Library 6.2 The pipe 6.3 Operations on rows/observations 6.4 Operations on columns 6.5 Create summaries", " 6 Data Wrangling In this worksheet, we will: Introduce dplyr functions to manipulate our dataset Use the pipe |&gt; to combine different steps Think about the structure of our data 6.1 Dataset and Library We will consider a built-in dataset that is available in the tidyverse package so first load the package: # Upload the package library(tidyverse) The txhousing dataset contains information about the housing market in Texas between 2000 and 2015. Run ?txhousing in your console for more details and take a look at the dataset: # Take a look at the first few rows of the dataset head(txhousing) Get information about the dimensions, types of variables, and some examples of values with glimpse(): # Dimensions and structure of the dataset glimpse(txhousing) ## Rows: 8,602 ## Columns: 9 ## $ city &lt;chr&gt; &quot;Abilene&quot;, &quot;Abilene&quot;, &quot;Abilene&quot;, &quot;Abilene&quot;, &quot;Abile… ## $ year &lt;int&gt; 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 20… ## $ month &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4,… ## $ sales &lt;dbl&gt; 72, 98, 130, 98, 141, 156, 152, 131, 104, 101, 100… ## $ volume &lt;dbl&gt; 5380000, 6505000, 9285000, 9730000, 10590000, 1391… ## $ median &lt;dbl&gt; 71400, 58700, 58100, 68600, 67300, 66900, 73500, 7… ## $ listings &lt;dbl&gt; 701, 746, 784, 785, 794, 780, 742, 765, 771, 764, … ## $ inventory &lt;dbl&gt; 6.3, 6.6, 6.8, 6.9, 6.8, 6.6, 6.2, 6.4, 6.5, 6.6, … ## $ date &lt;dbl&gt; 2000.000, 2000.083, 2000.167, 2000.250, 2000.333, … There are 8602 rows and 9 in the dataset. What does one row represent? One city/year/month. Looking at the documentation with ?txhousing, we are told that the information about the housing market in Texas was provided by the TAMU real estate center. The variables are defined as follows: Variables Description city Name of multiple listing service (MLS) area year, month Year, Month for the housing market data sales Number of sales volume Total value of sales median Median sale price listings Total active listings inventory Amount of time (in months) it would take to sell all current listings at current pace of sales date Date for the housing market data (year + month / 12) Let’s manipulate this dataset, with the 6 core dplyr functions. 6.2 The pipe The pipe |&gt; is a very important operator to build on code: # These two pieces of code are equivalent summary(txhousing) ## city year month sales ## Length:8602 Min. :2000 Min. : 1.000 Min. : 6.0 ## Class :character 1st Qu.:2003 1st Qu.: 3.000 1st Qu.: 86.0 ## Mode :character Median :2007 Median : 6.000 Median : 169.0 ## Mean :2007 Mean : 6.406 Mean : 549.6 ## 3rd Qu.:2011 3rd Qu.: 9.000 3rd Qu.: 467.0 ## Max. :2015 Max. :12.000 Max. :8945.0 ## NA&#39;s :568 ## volume median listings ## Min. :8.350e+05 Min. : 50000 Min. : 0 ## 1st Qu.:1.084e+07 1st Qu.:100000 1st Qu.: 682 ## Median :2.299e+07 Median :123800 Median : 1283 ## Mean :1.069e+08 Mean :128131 Mean : 3217 ## 3rd Qu.:7.512e+07 3rd Qu.:150000 3rd Qu.: 2954 ## Max. :2.568e+09 Max. :304200 Max. :43107 ## NA&#39;s :568 NA&#39;s :616 NA&#39;s :1424 ## inventory date ## Min. : 0.000 Min. :2000 ## 1st Qu.: 4.900 1st Qu.:2004 ## Median : 6.200 Median :2008 ## Mean : 7.175 Mean :2008 ## 3rd Qu.: 8.150 3rd Qu.:2012 ## Max. :55.900 Max. :2016 ## NA&#39;s :1467 txhousing |&gt; summary() ## city year month sales ## Length:8602 Min. :2000 Min. : 1.000 Min. : 6.0 ## Class :character 1st Qu.:2003 1st Qu.: 3.000 1st Qu.: 86.0 ## Mode :character Median :2007 Median : 6.000 Median : 169.0 ## Mean :2007 Mean : 6.406 Mean : 549.6 ## 3rd Qu.:2011 3rd Qu.: 9.000 3rd Qu.: 467.0 ## Max. :2015 Max. :12.000 Max. :8945.0 ## NA&#39;s :568 ## volume median listings ## Min. :8.350e+05 Min. : 50000 Min. : 0 ## 1st Qu.:1.084e+07 1st Qu.:100000 1st Qu.: 682 ## Median :2.299e+07 Median :123800 Median : 1283 ## Mean :1.069e+08 Mean :128131 Mean : 3217 ## 3rd Qu.:7.512e+07 3rd Qu.:150000 3rd Qu.: 2954 ## Max. :2.568e+09 Max. :304200 Max. :43107 ## NA&#39;s :568 NA&#39;s :616 NA&#39;s :1424 ## inventory date ## Min. : 0.000 Min. :2000 ## 1st Qu.: 4.900 1st Qu.:2004 ## Median : 6.200 Median :2008 ## Mean : 7.175 Mean :2008 ## 3rd Qu.: 8.150 3rd Qu.:2012 ## Max. :55.900 Max. :2016 ## NA&#39;s :1467 The pipe makes code more readable by avoiding the need to nest functions inside each other and allows for a cleaner and more intuitive way to chain operations. 6.3 Operations on rows/observations Let’s consider some dplyr functions that apply to the rows/observations of our dataset. 6.3.1 Filter Use filter() to choose rows/observations verifying some conditions: # Filter with one criteria txhousing |&gt; filter(city == &quot;Austin&quot;) # Filter with multiple criteria txhousing |&gt; filter(city == &quot;Austin&quot;, sales &lt;= 1000) # Same as txhousing |&gt; filter(city == &quot;Austin&quot; &amp; sales &lt;= 1000) # Same as txhousing |&gt; filter(city == &quot;Austin&quot;) |&gt; filter(sales &lt;= 1000) We can check the number of rows that satisfy the conditions by pipping into nrow(): # Filter to check missing values for one variable txhousing |&gt; # Filter with multiple criteria filter(city == &quot;Austin&quot;, sales &lt;= 1000) |&gt; # Count the rows nrow() ## [1] 2 Only 2 rows satisfied these conditions! 6.3.2 Arrange Use arrange() to sort rows/observations for some variables. Default is ascending (from least to greatest or alphabetically for categories) but to sort in the other direction use desc(). # Sort by number of sales, least-to-greatest txhousing |&gt; arrange(sales) # Sort by number of sales, greatest-to-least (descending order) txhousing |&gt; arrange(desc(sales)) 6.3.3 Minimum/Maximum values Let’s try top_n() vs slice_max()/slice_min(), and top_frac(). # Select top rows (max values) for a variable txhousing |&gt; # Use `top_n(number of rows, variables)` top_n(n = 4, sales) How does it differ from slice_max? # Select top percent of rows (max values) for a variable txhousing |&gt; # Use `slice_max(number of rows, variables)` slice_max(n = 4, sales) # Select bottom rows (min values) for a variable txhousing |&gt; # Use `top_n(-number of rows, variables)` top_n(n = -4, sales) # Why did we get more than 4 rows? # Select top percent of rows (max values) for a variable txhousing |&gt; # Use `top_frac(proportion of rows, variables)` top_frac(n = 0.001, sales) # Note: for the minimum values add `-` in front of the proportion 6.3.3.1 Try it! When were the lowest 5 numbers of sales for Austin? Display them in chronological order. # Write and submit code here! Write sentences here. 6.4 Operations on columns Let’s consider some dplyr functions that apply to the columns/variables of our dataset. 6.4.1 Select Use select() to keep or rename a subset of columns/variables. # Select to keep only some variables txhousing |&gt; # Only see 4 variables select(city, year, month, sales) # Select to keep columns using indexes of the columns txhousing |&gt; select(1:4,6) # Drop variables using &quot;-&quot; txhousing |&gt; # See all but these 4 variables select(-city, -year, -month, -date) # Select and rename... txhousing |&gt; # Use `select()` to rename some variables new_name = old_name select(Location = city, Calendar_Year = year, Month = month, Number_of_sales = sales) # or just use rename() with the same structure txhousing |&gt; rename(Location = city, Calendar_Year = year, Month = month, Number_of_sales = sales) 6.4.2 Mutate Use mutate() to create new columns/variables: # Find the mean sale price per row txhousing |&gt; mutate(mean_price = volume/sales) 6.4.2.1 Try it! What’s the difference between the average price as calculated above and the median sale price? Are these two measures the same? Why/Why not? # Write and submit code here! txhousing |&gt; mutate(mean_price = volume/sales, diff_price = mean_price - median) |&gt; filter(diff_price == 0) Write sentences here. 6.5 Create summaries Let’s consider some dplyr functions that can create some summaries for our dataset. 6.5.1 Summarize Use summarize() (or summarise() in British!) to calculate summary statistics on columns/variables. Some useful summary functions: mean(), sd(), median(), IQR(), min(), max(), n(), n_distinct(), cor(), … # Find the mean number of sales txhousing |&gt; summarize(mean_sales = mean(sales, na.rm = T)) # ignore NA values # Add more summaries: txhousing |&gt; summarize( # the mean mean_sales = mean(sales, na.rm = T), # the median median_sales = median(sales, na.rm = T), # the number of rows n_rows = n(), # the number of distinct cities in the dataset n_cities = n_distinct(city), # the correlation between sales and median price correlation = cor(sales, median, use = &quot;complete.obs&quot;)) 6.5.1.1 Try it! Find the total number of sales for Austin in 2009. # Write and submit code here! txhousing |&gt; filter(city == &quot;Austin&quot; &amp; year == 2010) |&gt; summarize(total_sales = sum(sales)) Write sentences here. What if we wanted to generate a similar report for each year across all cities in txhousing? Let’s use a function that allows us to create summaries per subgroup. 6.5.2 Group by This is one very important function! It enables us to create subgroups and apply a function to all these subgroups For example, find summaries per city and per year: # Find summaries by subgroups txhousing |&gt; # Each year is a subgroup group_by(year) |&gt; # Create summaries for each subgroup summarize(total_sales = sum(sales, na.rm = TRUE), # total number of sales nb_rows = n()) # count how many rows in each subset Note that there are less rows in 2015. How could it influence the total number of sales during that year? Total in 2015 would be less. Let’s try to be a little more specific and find the total number of sales per year and per month: txhousing |&gt; # Each year/month is a subgroup group_by(year,month) |&gt; # Create summaries for each subgroup summarize(total_sales = sum(sales, na.rm = TRUE), # total number of sales nb_rows = n()) # count how many rows in each subset 6.5.2.1 Try it! Find the total number of sales per month in txhousing, but ignoring values from 2015 since there are some months missing. Then create a ggplot to show how the number of sales may vary per month. # Write and submit code here! Write sentences here. Check out the dplyr Cheat sheet for more practice! "],["07_MoreDataWrangling.html", "7 More Data Wrangling 7.1 Dataset and Library 7.2 Recoding variables 7.3 Handling missing values", " 7 More Data Wrangling In this worksheet, we will: Recode some variables for easier visualizations Discuss how to handle missing values 7.1 Dataset and Library We will again consider the built-in dataset txhousing, available in the tidyverse package: # Upload the package library(tidyverse) # Take a look at the first few rows of the dataset head(txhousing) Let’s further manipulate this dataset and create visualizations. 7.2 Recoding variables There are many reasons why we may want to recode some variables. This list is not exhaustive! 7.2.1 Log-transformation When a variable is highly skewed, it might be difficult to “see” the variation: # Check this boxplot txhousing |&gt; ggplot() + geom_boxplot(aes(x = sales)) ## Warning: Removed 568 rows containing non-finite outside the scale range ## (`stat_boxplot()`). For distributions of numeric variables that are heavily right-skewed like this one we can apply a log-transformation: txhousing |&gt; # Transform the sales variable mutate(log_sales = log(sales)) |&gt; # Use this new variable in a ggplot ggplot() + geom_boxplot(aes(x = log_sales)) ## Warning: Removed 568 rows containing non-finite outside the scale range ## (`stat_boxplot()`). What is the unit of this new variable? Write sentences here. Note that this log-transformation only works for right-skewed data and can only be applied to values greater than 0. 7.2.2 Numeric variable considered as a categorical variable Some variables are coded numerically but would be better to represent as a category: # Check this plot txhousing |&gt; ggplot(aes(x = year, y = sales)) + geom_smooth(se = FALSE) ## Warning: Removed 568 rows containing non-finite outside the scale range ## (`stat_smooth()`). txhousing |&gt; # Color by year as a numeric variable ggplot(aes(x = year, y = sales, color = month)) + geom_smooth(se = FALSE) ## Warning: Removed 568 rows containing non-finite outside the scale range ## (`stat_smooth()`). ## Warning: The following aesthetics were dropped during statistical ## transformation: colour. ## ℹ This can happen when ggplot fails to infer the correct grouping ## structure in the data. ## ℹ Did you forget to specify a `group` aesthetic or to convert a ## numerical variable into a factor? txhousing |&gt; # Consider year as a factor (a type of categorical variable) mutate(month_fct = as.factor(month)) |&gt; # Color by year as a categorical variable ggplot(aes(x = year, y = sales, color = month_fct)) + geom_smooth(se = FALSE) ## Warning: Removed 568 rows containing non-finite outside the scale range ## (`stat_smooth()`). The as.numeric() would do the opposite: make a variable numeric. 7.2.3 Recoding values based on conditions We can recode some values based on conditions with case_when(): txhousing |&gt; # Recode months into 4 quarters mutate(month_cat = case_when( month &lt;= 3 ~ &quot;1st quarter&quot;, 4 &lt;= month &amp; month &lt;= 6 ~ &quot;2nd quarter&quot;, 7 &lt;= month &amp; month &lt;= 9 ~ &quot;3rd quarter&quot;, 10 &lt;= month &amp; month &lt;= 12 ~ &quot;4th quarter&quot;)) |&gt; # Use this new variable in a ggplot ggplot(aes(x = year, y = sales, color = month_cat)) + geom_smooth(se = FALSE) ## Warning: Removed 568 rows containing non-finite outside the scale range ## (`stat_smooth()`). Or we can recode each value with recode(): txhousing |&gt; # Recode months with Spanish names mutate(month_es = recode(month, `1` = &quot;enero&quot;, `2` = &quot;febrero&quot;, `3` = &quot;marzo&quot;, `4` = &quot;abril&quot;, `5` = &quot;mayo&quot;, `6` = &quot;junio&quot;, `7` = &quot;julio&quot;, `8` = &quot;agosto&quot;, `9` = &quot;septiembre&quot;, `10` = &quot;octubre&quot;, `11` = &quot;noviembre&quot;, `12` = &quot;diciembre&quot;)) |&gt; # You can control in which order the levels of a factor variable would appear mutate(month_es = factor(month_es, levels = c(&quot;enero&quot;, &quot;febrero&quot;, &quot;marzo&quot;, &quot;abril&quot;, &quot;mayo&quot;, &quot;junio&quot;, &quot;julio&quot;, &quot;agosto&quot;, &quot;septiembre&quot;, &quot;octubre&quot;, &quot;noviembre&quot;, &quot;diciembre&quot;))) |&gt; # Use this new variable in a ggplot ggplot(aes(x = month_es, y = sales)) + geom_bar(stat = &quot;summary&quot;, fun = sum) ## Warning: Removed 568 rows containing non-finite outside the scale range ## (`stat_summary()`). 7.3 Handling missing values We talked about removing missing values in calculations with na.rm = TRUE for example. But simply ignoring missing data without trying to understand why the data might be missing could introduce some bias in our visualizations and statistics. 7.3.1 Missing values never go unnoticed When calculating statistics: txhousing |&gt; # Find mean and correlation summarize(mean_sales = mean(sales), correlation = cor(sales,listings)) When making visualizations: # Check the Warning message txhousing |&gt; ggplot() + geom_boxplot(aes(x = sales)) ## Warning: Removed 568 rows containing non-finite outside the scale range ## (`stat_boxplot()`). Before omitting the missing values, we should check how many values are missing and if there is any pattern in the missing data: txhousing |&gt; # Count missing values for each variable summarize_all(~ sum(is.na(.))) txhousing |&gt; # Split by year/month group_by(year,month) |&gt; # Count missing values for each variable summarize_all(~ sum(is.na(.))) Note that it looks like more recent data is not missing as much as older data. txhousing |&gt; # Split by city group_by(city) |&gt; # Count missing values for each variable summarize_all(~ sum(is.na(.))) Some cities don’t have any data missing, others have only a few, and others have a lot! 7.3.2 Values that were omitted If we have monthly data in txhousing for 46 cities, from 2000 to 2015, how many rows should we expect? The missing rows are due to the data only being reported until July of 2015. It would not make sense to compare yearly data in 2015 to other years. "],["08_RelationalData.html", "8 Relational Data 8.1 Datasets and Library 8.2 Different types of joining functions 8.3 Common issues with joining 8.4 Group Practice", " 8 Relational Data In this worksheet, we will: Identify key variables and how they are used to join datasets Perform different types of joins to combine datasets in various ways Address common issues in joining datasets 8.1 Datasets and Library We will discuss joining functions to combine datasets from the tidyverse package: # Load a package library(tidyverse) Consider the following built-in datasets containing information about some band members of the Beatles and Rolling Stones: # Preview datasets band_members band_instruments To join datasets, we first need to identify a key variable (a variable, or sometimes a set of variables, that defines a unique row in a dataset). What is the key variable to join the two datasets above? Write sentences here. 8.2 Different types of joining functions 8.2.1 Inner join Join datasets using inner_join() to get the information they have in common: # Join 2 datasets with `inner_join()` inner_join(band_members, band_instruments, by = &quot;name&quot;) Why we only get 2 rows? Write sentences here. 8.2.2 Left join Join datasets using left_join() to keep information from the “left” dataset and add information from the “right” dataset: # Join 2 datasets with `left_join()` left_join(band_members, band_instruments, by = &quot;name&quot;) There was one row in the left dataset that did not appear in the right dataset. How did R handle that? Write sentences here. 8.2.2.1 Try it! Swap the left and right datasets from above. How do the resulting joined dataset compare? # Write and submit code here! Write sentences here. 8.2.3 Right join This function does the opposite of left_join() so it is not widely used. # Join 2 datasets with `right_join()` right_join(band_members, band_instruments, by = &quot;name&quot;) Which left_join() function above gave a similar result? Write sentences here. 8.2.4 Full join Join datasets using full_join() to keep information from both datasets: # Join 2 datasets with `full_join()` full_join(band_members, band_instruments, by = &quot;name&quot;) Note how R added missing values for the names that were in only one of these two datasets. 8.2.5 Anti join We can use anti_join() to get information from the left dataset for which there is no information in the right dataset: # Find missing observations with `anti_join()` anti_join(band_members, band_instruments, by = &quot;name&quot;) Mick did not have an instrument in band_instruments. 8.3 Common issues with joining There are some options and common issues to consider when joining different datasets. 8.3.1 No matching key Some datasets may refer to the same variable with different names. Consider the following datasets: band_members band_instruments2 What happens if we are joining 2 datasets that have different names for the key variable? # Join the two datasets with different key variables left_join(band_members, band_instruments2, by = &quot;name&quot;) We need to specify the name of the key in each dataset: # Join the two datasets with different key variables left_join(band_members, band_instruments2, # and specify which variables match across datasets with `c()` by = c(&quot;name&quot; = &quot;artist&quot;)) Note: The order in which we specify the match for the key variable matters: specify the match from the left dataset to the right dataset. Also, note that only the first name of the key variable is kept in the joined dataset. 8.3.2 Auto-suffixing Here is another dataset reporting fun facts about instruments: # Consider this new dataset band_instruments3 &lt;- data.frame( name = c(&quot;John&quot;,&quot;Paul&quot;,&quot;Keith&quot;), plays = c(&quot;a Steinway upright piano his biggest solo hit Imagine &quot;, &quot;54 different instruments&quot;, &quot;10 out of his 3,000 guitars regularly&quot;)) band_instruments3 What happens if we are joining 2 datasets with the same variable name that is not a key variable? # Join the two variables of instruments played left_join(band_instruments, band_instruments3, by = &quot;name&quot;) Any columns that have the same name in both datasets but are not used to join on will be given suffixes .x and .y to specify which original dataset they came from (left and right, respectively). You can modify the default suffix: # Join the two variables of instruments played left_join(band_instruments, band_instruments3, by = &quot;name&quot;, # To give names to the suffix, use `suffix =` suffix = c(&quot;.instrument&quot;,&quot;.fun_fact&quot;)) Note: If the same variable appears in both dataset with the same meaning, it might be a key variable! See section d. below. 8.3.3 Duplicates Here is another dataset reporting a member of a new band: # Consider this new dataset band_members2 &lt;- data.frame( name = c(&quot;Mick&quot;,&quot;John&quot;,&quot;Paul&quot;,&quot;John&quot;), band = c(&quot;Stones&quot;, &quot;Beatles&quot;, &quot;Beatles&quot;, &quot;Bluesbreakers&quot;)) band_members2 8.3.3.1 Try it! Join all the information from band_members2 to the instruments they play. Is the information contained in the resulting dataset correct? # Write and submit code here! Write sentences here. Note that it is sometimes useful to add repeating information for some rows that share the same key. We just need to be careful that it makes sense! 8.3.4 Several key variables Sometimes one variable is not enough to identify a unique match. Consider this new dataset: # Add a variable to instruments band_instruments4 &lt;- band_instruments |&gt; mutate(band = c(&quot;Beatles&quot;, &quot;Beatles&quot;, &quot;Stones&quot;)) band_instruments4 What key variable(s) should be taken into account to identify a unique row when matching this data with band_members2? # Join 2 datasets with 2 key variables left_join(band_members2, band_instruments4, # List the key variables with `c()` by = c(&quot;name&quot;, &quot;band&quot;)) 8.4 Group Practice You will join information from the flights and weather datasets from the nycflights package: library(nycflights13) flights &lt;- flights weather &lt;- weather We can see how these tables relate to each other: Within your group, you will explore if the weather impacts whether or not a flight was delayed. To do so: In flights, create a variable called delay_60minutes that takes values TRUE if the departure delay was greater than or equal to 60 minutes and FALSE if the delay was less than 60 minutes (but still greater than 0). Join the information from the weather, if available. Choose one of the variables from the weather dataset and check if there is difference between the flights that were delayed more than 60 minutes or not with a plot and summary statistics. Share your plot, statistics, and conclusion here. Were there any flights that did not have any weather information? "],["09_DatesTimes.html", "9 Dates and Times 9.1 Datasets and Libraries 9.2 Parsing dates and times 9.3 Manipulating dates and times 9.4 Group Practice", " 9 Dates and Times In this worksheet, we will: Parse dates and times from strings into R-compatible formats using lubridate Manipulate dates and times, including extracting specific components (year, month, day, hour, etc.) Calculate differences between two dates/times Visualize time-based data trends and summarize data over time units 9.1 Datasets and Libraries Let’s load tidyverse which contains the lubridate package and nycflights13 for datasets: # Load packages library(tidyverse) library(nycflights13) Here are the main datasets we will manipulate today: # Take a look at txhousing and flights head(txhousing) head(flights) In what format are dates/times reported in each dataset? Only time_hour is in a date/time format. 9.2 Parsing dates and times Parsing dates and times means converting a string or numeric representation of a date or time into a proper object that R can understand and work with. 9.2.1 R formats Here are two typical date/time formats in R: # Look at what date/time is today/now! today() ## [1] &quot;2024-12-03&quot; now() ## [1] &quot;2024-12-03 18:37:54 CST&quot; # How R identifies these formats class(today()) ## [1] &quot;Date&quot; class(now()) ## [1] &quot;POSIXct&quot; &quot;POSIXt&quot; By default, R considers: dates as “yyyy-mm-dd” (year-month-day) times as “hh:mm:ss” (hours:minutes:seconds) date/times as “yyyy-mm-dd hh:mm:ss” Here is an example of a date entered in the year-month-day but does R recognize it as a date? # Check the format of the date entered class(&quot;2024-10-03&quot;) ## [1] &quot;character&quot; We can convert a character/string and convert it as a date in an R format: # year, month, day ymd(&quot;2024-10-03&quot;) ## [1] &quot;2024-10-03&quot; # Check the format now class(ymd(&quot;2024-10-03&quot;)) ## [1] &quot;Date&quot; Here are some examples of other formats of dates than can be converted: # day, month, year dmy(&quot;3.10.2024&quot;) ## [1] &quot;2024-10-03&quot; dmy(&quot;3/10/2024&quot;) ## [1] &quot;2024-10-03&quot; dmy(&quot;3-10-2024&quot;) ## [1] &quot;2024-10-03&quot; dmy(&quot;the 3rd of October 2024&quot;) ## [1] &quot;2024-10-03&quot; dmy(&quot;03-octobre-2024&quot;) # this one did not work, why? ## Warning: All formats failed to parse. No formats found. ## [1] NA # month, day, year mdy(&quot;10/3/2024&quot;) ## [1] &quot;2024-10-03&quot; mdy(&quot;October 3rd, 2024&quot;) ## [1] &quot;2024-10-03&quot; Similarly, we can convert strings into time: # date in year, month, day and time ymd_hms(&quot;2024-10-03 03:15:00 PM&quot;) ## [1] &quot;2024-10-03 15:15:00 UTC&quot; # also check other date functions with _hms or _hm, or simply the function hm() and hms() hm(&quot;03:15 PM&quot;) ## [1] &quot;3H 15M 0S&quot; hms(&quot;03:15:00 AM&quot;) ## [1] &quot;3H 15M 0S&quot; 9.2.2 Combining date/time components We can combine the different parts of a date with make_date() or also add time with make_datetime(). # Combine year and month into a date txhousing |&gt; mutate(new_date = make_date(year, month)) By default, the day on the date was set to the first day of the month. 9.2.3 Extracting part(s) of the date On the contrary, we might want to extract some specific date/time information from a date: # Extract year, month, day and time year(now()) ## [1] 2024 month(now()) ## [1] 12 week(now()) ## [1] 49 day(now()) ## [1] 3 wday(now()) # what is that? ## [1] 3 hour(now()) ## [1] 18 minute(now()) ## [1] 37 second(now()) ## [1] 54.80454 Check the label and abbr options for month() and wkday(): # Convenient options month(now(), label = TRUE, abbr = FALSE) ## [1] December ## 12 Levels: January &lt; February &lt; March &lt; April &lt; May &lt; ... &lt; December wday(now(), , label = TRUE, abbr = TRUE) ## [1] Tue ## Levels: Sun &lt; Mon &lt; Tue &lt; Wed &lt; Thu &lt; Fri &lt; Sat 9.2.3.1 Try it! In the flights dataset, extract the information of the weekday from the time_hour variable. Does each day have the same amount of flights? # Write and submit code here! flights |&gt; mutate(day_in_week = wday(time_hour, , label = TRUE, abbr = TRUE)) |&gt; ggplot() + geom_bar(aes(x = day_in_week)) Write sentences here. 9.3 Manipulating dates and times 9.3.1 Finding differences between dates and times We can find date/time differences with difftime(): # How many days between now and the first day of the year? difftime(now(), mdy_hms(&quot;1-1-2024 00:00:00 am&quot;), units = &quot;days&quot;) ## Time difference of 338.0263 days # What if we want to find the difference with another unit? difftime(now(), mdy_hms(&quot;1-1-2024 00:00:00 am&quot;), units = &quot;weeks&quot;) ## Time difference of 48.28948 weeks difftime(now(), mdy_hms(&quot;1-1-2024 00:00:00 am&quot;), units = &quot;hours&quot;) ## Time difference of 8112.632 hours difftime(now(), mdy_hms(&quot;1-1-2024 00:00:00 am&quot;), units = &quot;mins&quot;) ## Time difference of 486757.9 mins difftime(now(), mdy_hms(&quot;1-1-2024 00:00:00 am&quot;), units = &quot;secs&quot;) ## Time difference of 29205476 secs Note that the output reports the time difference with a unit. If we would like to find the value of the difference, we can use the function as.numeric(): # Report only a value as.numeric(difftime(now(), mdy_hms(&quot;1-1-2024 00:00:00 am&quot;), units = &quot;days&quot;)) ## [1] 338.0263 9.3.2 Summarizing date/time data Depending on the level of detail we would like to focus on, we can aggregate the data by specific time units. For example, we can compare summaries over years, months, days of the week, or by the hour, minute, second. 9.3.2.1 Try it! We looked at the number of flights per day before. Compare the number of flights at another time unit. Do you notice any differences? # Write and submit code here! flights |&gt; ggplot() + geom_bar(aes(x = minute)) Write sentences here. We can also represent the values of a variable over time: # Comparing sales over time txhousing |&gt; group_by(date) |&gt; summarize(total_sales = sum(sales, na.rm = TRUE)) |&gt; ggplot() + geom_line(aes(x = date, y = total_sales)) And compare if there is the same pattern over a repeating time unit (for example, months repeat every year): # Comparing monthly sales for each year txhousing |&gt; group_by(year,month) |&gt; summarize(total_sales = sum(sales, na.rm = TRUE)) |&gt; ggplot() + geom_line(aes(x = month, y = total_sales)) + facet_wrap(~year) 9.3.2.2 Try it! Compare the maximum distance for a flight per hour of the day. When do longer flights depart from NYC airports? # Write and submit code here! flights |&gt; group_by(hour) |&gt; slice_max(distance, n = 1) |&gt; ggplot() + geom_line(aes(x = hour, y = distance)) Write sentences here. 9.3.3 A few remarks Here are some common pitfalls to look out for: Different date formats (e.g., MM/DD/YYYY vs. DD/MM/YYYY) can lead to incorrect parsing. Always specify the date format explicitly when converting strings to dates. Take into account that not all years are 365 days (leap years), not all days are 24 hours (daylight saving time), and not all months have the same amount of days. Most lubridate functions are designed to take those facts into account when manipulating dates/times. The time is not the same depending on where the data was collected. Convert dates/times between time zones with some lubridate functions such as with_tz(). # Time in France now(tzone = &quot;Europe/Paris&quot;) ## [1] &quot;2024-12-04 01:37:57 CET&quot; # Convert to our current time zone with_tz(now(tzone = &quot;Europe/Paris&quot;), tzone = &quot;America/Chicago&quot;) ## [1] &quot;2024-12-03 18:37:57 CST&quot; 9.4 Group Practice Let’s explore birthdays from students in this class! Enter your birthday (including year) on this spreadsheet. Once everyone has entered their birthdays, download the spreadsheet as a .csv file and import it in R. Does any birthday need to be recoded? Parse the birthday into a date format that R can work with. Make an analysis of the birthdays and paste any plot or statistics you create here. # Group practice Birthdays &lt;- read_csv(&quot;Birthdays.csv&quot;) Birthdays |&gt; mutate(birthdays = mdy(birthdays), month = month(birthdays), day = day(birthdays)) |&gt; group_by(month, day) |&gt; summarize(n = n()) |&gt; filter(n &gt; 1) "],["10_ReshapingData.html", "10 Reshaping Data 10.1 Datasets and Libraries 10.2 Pivoting 10.3 Separating and uniting 10.4 Group Practice", " 10 Reshaping Data In this worksheet, we will: Understand the principles of tidy data Discuss some functions that can help us tidy our data Identify when we need to tidy data 10.1 Datasets and Libraries Today we will manipulate datasets that are part of the tidyr package, included in tidyverse: # Load a package library(tidyverse) The following tables all display the number of tuberculosis (TB) cases documented by the World Health Organization in Afghanistan, Brazil, and China between 1999 and 2000. They contain values associated with four variables (country, year, cases, and population), but each table organizes the values in a different way: # Open the different tabular representations of the tuberculosis data table1 table2 table3 table4a table4b table5 Which of these tables are tidy? Just the first one. 10.2 Pivoting 10.2.1 Wide to long Let’s focus on table4a: # Look at table4a - Tuberculosis cases table4a The function pivot_longer() makes a dataset “longer” by increasing the number of rows and decreasing the number of columns. # Use pivot_longer() to have an observation for each country/year newtable4a &lt;- pivot_longer(table4a, # Columns in table4a to put as rows cols = c(`1999`, `2000`), # use `` for unconventional variable names # Save the columns 1999 and 2000 as values of a variable `year` names_to = &quot;year&quot;, # Save the cell values as the values of a variable `cases` values_to = &quot;cases&quot;) newtable4a Here is how we pivoted table4 into a longer, tidy form: 10.2.1.1 Try it! Do the same for table4b. Think about what the numbers represent in that table to name the variable appropriately and name the resulting dataset as newtable4b. Then join newtable4a and newtable4b. Is the joined dataset tidy? If so, calculate the rate of TB cases (cases divided by population). # Write and submit code here! newtable4b &lt;- pivot_longer(table4b, # Columns in table4a to put as rows cols = c(`1999`, `2000`), # use `` for unconventional variable names # Save the columns 1999 and 2000 as values of a variable `year` names_to = &quot;year&quot;, # Save the cell values as the values of a variable `cases` values_to = &quot;population&quot;) full_join(newtable4a,newtable4b, by = c(&quot;country&quot;, &quot;year&quot;)) |&gt; mutate(rate = cases / population * 100000) Write sentences here. What if we had joined table4a and table4b before tidying? # Take a look at both tables again table4a table4b # Join untidy tables inner_join(table4a, table4b, by = &quot;country&quot;) # Improve how we join these untidy tables joined_untidy &lt;- inner_join(table4a, table4b, by = &quot;country&quot;, # Adding explicit suffixes suffix = c(&quot;_cases&quot;, &quot;_population&quot;)) joined_untidy Now, let’s try to tidy the joined dataset: # Using pivot_longer() on all columns pivot_longer(joined_untidy, # Refer to all variables with `:` cols = c(&#39;1999_cases&#39;:&#39;2000_population&#39;)) We need to split values for the variable name like 1999.cases into two columns (one for year, one for cases/population). The function separate() can find the separator automatically (or we can specify the separator with sep =): # Using pivot_longer() on all columns pivot_longer(joined_untidy, cols = c(&#39;1999_cases&#39;:&#39;2000_population&#39;)) |&gt; # Distinguish between year and cases/population variables separate(name, sep = &quot;_&quot;, into = c(&quot;year&quot;, &quot;type&quot;)) The column value does not refer to a unique variable and each row does not represent one observation of country/year (for example, Afghanistan in 1999 is represented by 2 rows) We need to make the dataset wider. 10.2.2 Long to wide The last dataset we created above is actually called table2 in tidyr. # Take a look at table2 table2 The function pivot_wider() makes datasets wider by increasing the number of columns and decreasing the number of rows. # Use pivot_wider() to have a variable for the number of cases and one for population pivot_wider(table2, # the values of the variable `type` will become variables names_from = type, # the cell values values of `count` will match the corresponding variable values_from = count) Here is how we pivoted table2 into a wider, tidy form: 10.2.2.1 Try it! Do something similar for table1 so we only have one row per country. Is this resulting data tidy? Why or why not? # Write and submit code here! pivot_wider(table1, # the values of the variable `type` will become variables names_from = year, # the cell values values of `count` will match the corresponding variable values_from = c(&quot;cases&quot;,&quot;population&quot;)) Write sentences here. 10.3 Separating and uniting Some other functions that can help make our data tidy are separate() (see above for an example) and unite(). 10.3.1 Separate As mentioned in 2.a, we can split a variable into two or more variables with separate(). R can find the separator automatically or you could specify the separator with the argument sep = \" \". # Take a look at table3 table3 10.3.1.1 Try it! Separate rate into two variables: cases and population. What do you notice about the type of the resulting variables? Why do you think that happened? Note: Add the argument convert = TRUE in separate() to convert the variables in the appropriate format. # Write and submit code here! table3 |&gt; separate(rate, into = c(&quot;cases&quot;, &quot;population&quot;), sep = &quot;/&quot;, convert = T) |&gt; mutate(rate = cases/population) Write sentences here. 10.3.2 Unite On the opposite, we can combine two variables into one with unite(). # Take a look at table5 table5 Let’s gather century and year: # Use unite() to rejoin the variables century and year created above unite(table5, new, century, year) # R places &quot;_&quot; automatically or you can specify a separator with `sep = &quot;&quot;` unite(table5, new, century, year, sep = &quot;&quot;) |&gt; mutate(new = as.numeric(new)) 10.4 Group Practice Practice the tidyr functions we have learned on the billboard dataset. This built-in dataset contains songs rankings for Billboard top 100 in the year of 2000 for each week after it entered the Billboard (wk1-wk76). # Take a look at the dataset head(billboard) Why is that data not technically tidy? Which pivot_...() function should we use to make billboard tidy? Try it! Write sentences here. # Write and submit code here! billboard pivot_longer(billboard, cols = c(wk1:wk76), names_to = &quot;week&quot;, values_to = &quot;ranking&quot;) In which format should billboard be if we wanted to check at what rank songs enter the Billboard top 100? Try it! What is the average ranking on the first week? What is the best ranking on the first week? # Find the max of wk1 billboard |&gt; summarize(best_rank_wk1 = min(wk1), avg_rank_wk1 = mean(wk1)) In which format should billboard be if we wanted to check when a song is more likely to be at the top of the Billboard? Try it! On which week a song is more likely to reach the top? # Use the tidy version! pivot_longer(billboard, cols = c(wk1:wk76), names_to = &quot;week&quot;, values_to = &quot;ranking&quot;) |&gt; # Check when the ranking is at the top! filter(ranking == 1) |&gt; # which week have the higher rank group_by(week) |&gt; summarize(n = n()) |&gt; filter(n &gt; 1) |&gt; arrange(desc(n)) In which format should billboard be if we wanted to count how many weeks a song stayed on the Billboard top 100? Try it! Which 5 songs stayed the longest? # Use the tidy version! pivot_longer(billboard, cols = c(wk1:wk76), names_to = &quot;week&quot;, values_to = &quot;ranking&quot;) |&gt; # Get rid of the missing values filter(!is.na(ranking)) |&gt; # Calculate number of weeks per track group_by(track) |&gt; summarize(n = n()) |&gt; slice_max(n, n = 5) In which format should billboard be if we wanted to count how many songs per artist entered the Billboard top 100 in 2000? Try it! Which artists had more than three songs on the billboard that year? # Find the number of songs per artist billboard |&gt; group_by(artist) |&gt; summarize(n = n()) |&gt; filter(n &gt; 3) "],["11_Reproducibility.html", "11 Reproducibility 11.1 Coding practices 11.2 Reproducibility", " 11 Reproducibility In this worksheet, we will: Discuss ways to code that make it easier to share your work with 1) your future self, and 2) your collaborators. Reproduce some results that someone shared by publishing their code and data (which is still not very common though). 11.1 Coding practices Imagine that you ran some analyses about a year ago and got some feedback on your report. Now you want to rerun what you did with some updates, but when you open up your old code, it looks like this: install.packages(&#39;tidyr&#39;) library(tidyr) billboard_long &lt;- pivot_longer(billboard, cols = starts_with(&quot;wk&quot;), names_to = &quot;week&quot;, values_to = &quot;rank&quot;) billboard_long$rank &lt;- as.numeric(billboard_long$rank) length(unique(billboard_long$artist)) table(billboard_long$artist) hist(billboard_long$rank, col=&#39;grey&#39;, breaks = 100) billboard_long$week_num &lt;- as.numeric(gsub(&quot;wk&quot;, &quot;&quot;, billboard_long$week)) model_glm &lt;- glm(rank ~ week_num, data=billboard_long, family=gaussian) summary(model_glm) plot(billboard_long$week_num,billboard_long$rank) hist(residuals(model_glm)) plot(fitted(model_glm), residuals(model_glm)) abline(h=0, col=&#39;red&#39;) install.packages(&#39;lubridate&#39;) library(lubridate) billboard_long$month &lt;- month(billboard_long$date.entered) plot(billboard_long$month,billboard_long$rank) model2 &lt;- lm(rank ~ month, data=billboard_long) summary(model2) hist(residuals(model2)) plot(fitted(model2), residuals(model2)) abline(h=0, col=&#39;blue&#39;) mean_rank_by_artist &lt;- tapply(billboard_long$rank, billboard_long$artist, mean) install.packages(&#39;ggplot2&#39;) library(ggplot2) ggplot(billboard_long, aes(x=week_num, y=rank)) + geom_line(aes(color=artist)) + geom_smooth(method=&#39;lm&#39;, se=FALSE) + labs(title=&quot;Ranking Over Time&quot;, x=&quot;Week Number&quot;, y=&quot;Rank&quot;) install.packages(&#39;dplyr&#39;) library(dplyr) billboard_filtered &lt;- billboard_long %&gt;% filter(artist == &quot;U2&quot; | artist == &quot;Madonna&quot; | artist == &quot;Mariah Carey&quot;) billboard_long &lt;- billboard_long |&gt; group_by(artist,track) |&gt; mutate(rank_diff = rank - lag(rank)) Looking at the code chunk above, list at least 3 things that you wish your past-self had done differently to make it easier to re-run this analysis: Add indentations, comments # Break into chunks Call tidyverse instead of each individual package, put at the top Use the new pipe |&gt; 11.1.0.1 Try it! Which of the following do you think is the best way to name a variable? x &lt;- 156.2 myweightonmondayaftercheesepizza &lt;- 156.2 my_weight_on_monday_after_cheese_pizza &lt;- 156.2 My_Weight_Monday &lt;- 156.2 weight_monday &lt;- 156.2 weight.monday &lt;- 156.2 _ Write sentences here. 11.2 Reproducibility Reproducibility is the ability to reproduce data analysis results given the dataset(s) and code. The current standard of reproducibility calls for data and code to be made publicly available. Why do you think this standard is important? Keep in mind that analysis that is reproducible is not always robust (or correct). Why aren’t all quantitative research papers reproducible? Here are some challenges: Getting permission to publish raw/identifiable data. Complexities of data cleaning. Version control of files (what we’re talking about next week with GitHub!). Package/software updates. Random simulations. With this last one, you can “set seed” to get identical results with a “random” simulation: # From 100 possibilities x &lt;- 1:100 # Everyone will get a different answer here (random observation) sample(x,size=1) ## [1] 56 # Everyone will get the same answer here (same &quot;random&quot; observation) set.seed(313) sample(x,size=1) ## [1] 64 11.2.1 Group Practice Using the analysis-datasharing.Rmd and Data-Sharing-Policies_2017-01-25.xlsx, attempt to reproduce the following from the Vasilevsky et al.’s article: Table 1 Figure 1 What were the challenges your group faced when trying to reproduce these results? "],["12_OnlineData.html", "12 Online Data 12.1 Online data resource 12.2 Web scraping 12.3 Datasets formats 12.4 Export into csv", " 12 Online Data Data we have been analyzing in the class so far has been in a .csv format and mostly ready for analysis. But it won’t always be so easy to access… In this worksheet, we will: Explore different sources to find datasets Scrape data from the web “manually” and with code Import datasets with a different format Export datasets manipulated in R into csv files 12.1 Online data resource Datasets posted online are sometimes easy to access and download but always look for a data dictionary or documentation to help you make sense of the variables. 12.1.1 Data portal Let’s retrieve data from the City of Austin Open Data Portal about the quality of the water in Austin. Search for Data with the keywords watershed scores. Then we can import the dataset directly to RStudio with API endpoint: library(tidyverse) water_quality &lt;- read_csv(&quot;https://data.austintexas.gov/resource/vk3r-6prc.csv&quot;) 12.1.1.1 Try it! Represent the distribution of index_water_quality and problem_water_quality separately. What is the difference between these two variables? # Write and submit code here! hist(water_quality$index_water_quality) hist(water_quality$problem_water_quality) Different way to assess water quality on different scales (100 is best or worst). Be aware that if you get data directly from the web like that it might: No longer be available at some point. Be updated. It might be a better idea to export and save the file locally. 12.1.2 Downloading datasets Only download files from trusted websites! To assess whether a website can be trusted or not, consider the following factors: Check the source of the website: Websites of universities, government agencies, or well-known platforms (e.g., GitHub, Kaggle, and Data.gov…). Look for HTTPS and security Examine the quality of the website: Trustworthy websites often look polished and contain clearly written content, whereas scam sites may look poorly designed or filled with ads. Also be aware that the dataset you download might not be in a usable format in R! See section 3. 12.1.3 Websites with special permissions Other times, you’ll need approval to access the file, like here. Depending on the source, before you can get the data you might need to: Explain your purpose for using the data. Explain what security measures you will follow to protect the data. Get IRB (Instructional Review Board) approval before collecting data. Sign a data use agreement. Pay money. Refer to the Data Resources page for a list of common data resources. 12.2 Web scraping 12.2.1 Manually from the web If the data you want isn’t already compiled in a file, you will need to pull the information yourself. Sometimes, it’s as easy as a “manual scrape”, and simply copy/paste the values into Excel. This is not always perfect but usually follow these steps: Step 1: Select the data you want with your mouse and copy it. Step 2: Open a blank Excel or Google Sheets file. Paste the selection into your file. Step 3: Go to (Excel) File&gt;Save As&gt;Name it and choose the .csv format from the dropdown; or (Sheets) Name your file, then go to File&gt;Download&gt;csv 12.2.1.1 Try it! Manually scrape the state table describing the legal abortion limits by state. Create a .csv file and read it into R. Find in how many states abortion is banned. # Write and submit code here! wikipedia &lt;- read_csv(&quot;wikipedia.csv&quot;) table(wikipedia$`Waiting period`) ## ## N/A; abortion is banned here. No ## 13 2 ## No [240] No[238] ## 1 1 ## None Yes ## 24 9 wikipedia |&gt; filter(`On-demand gestational limit` == &quot;Fertilization&quot;) |&gt; count() Some challenges: extra row when copy/pasting, variable names long and with special characters. 12.2.2 With code There are many (paid) programs/software out there to scrape data from the web - some legal, some not. We will talk about scraping with code, for free with the rvest package. We can: Read HTML source code from a website. Break it into a nice structure. Extract the specific elements we want to analyze. library(rvest) Let’s work with a simple example first, the countries of the world and read the HTML content of this page in R: read_html(&quot;https://www.scrapethissite.com/pages/simple/&quot;) ## {html_document} ## &lt;html lang=&quot;en&quot;&gt; ## [1] &lt;head&gt;\\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; ch ... ## [2] &lt;body&gt;\\n &lt;nav id=&quot;site-nav&quot;&gt;&lt;div class=&quot;container&quot;&gt;\\n ... ## [3] &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11 ... ## [4] &lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/j ... ## [5] &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/pnotify/2. ... ## [6] &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/pnotify/2.1 ... ## [7] &lt;script type=&quot;text/javascript&quot;&gt;\\n \\n PNotify.prototype.o ... ## [8] &lt;script type=&quot;text/javascript&quot;&gt;\\n $(&quot;video&quot;).hover(function ... ## [9] &lt;script&gt;\\n (function(i,s,o,g,r,a,m){i[&#39;GoogleAnalyticsObjec ... ## [10] &lt;script&gt;\\n !function(f,b,e,v,n,t,s){if(f.fbq)return;n=f.fbq=f ... ## [11] &lt;noscript&gt;&lt;img height=&quot;1&quot; width=&quot;1&quot; style=&quot;display:none&quot; src=&quot; ... ## [12] &lt;script type=&quot;text/javascript&quot;&gt;\\n /* &lt;![CDATA[ */\\n var ... ## [13] &lt;script type=&quot;text/javascript&quot; src=&quot;//www.googleadservices.com ... ## [14] &lt;noscript&gt;\\n &lt;div style=&quot;display:inline;&quot;&gt;\\n &lt;img height ... ## [15] &lt;script async src=&quot;https://www.googletagmanager.com/gtag/js?id ... ## [16] &lt;script&gt;\\n window.dataLayer = window.dataLayer || [];\\n fu ... We can select some elements of this page. Without a deep knowledge of HMTL, we can use a simple tool to differentiate between all the different elements: Download Chrome’s Selector Gadget extension, which lets you easily identify the HTML “tag” for a pattern of elements that you want to scrape. Open the webpage you want to scrape from and click on the “Developer Tools”, the puzzle piece to the right of the address bar. Click on an element you want to scrape. If anything is highlighted yellow that you don’t want, click it to remove it from your selection. Once you see the element tag in the bar at the bottom, we can now scrape those with code: read_html(&quot;https://www.scrapethissite.com/pages/simple/&quot;) |&gt; html_elements(&quot;.country-name&quot;) |&gt; html_text(trim = TRUE) ## [1] &quot;Andorra&quot; ## [2] &quot;United Arab Emirates&quot; ## [3] &quot;Afghanistan&quot; ## [4] &quot;Antigua and Barbuda&quot; ## [5] &quot;Anguilla&quot; ## [6] &quot;Albania&quot; ## [7] &quot;Armenia&quot; ## [8] &quot;Angola&quot; ## [9] &quot;Antarctica&quot; ## [10] &quot;Argentina&quot; ## [11] &quot;American Samoa&quot; ## [12] &quot;Austria&quot; ## [13] &quot;Australia&quot; ## [14] &quot;Aruba&quot; ## [15] &quot;Åland&quot; ## [16] &quot;Azerbaijan&quot; ## [17] &quot;Bosnia and Herzegovina&quot; ## [18] &quot;Barbados&quot; ## [19] &quot;Bangladesh&quot; ## [20] &quot;Belgium&quot; ## [21] &quot;Burkina Faso&quot; ## [22] &quot;Bulgaria&quot; ## [23] &quot;Bahrain&quot; ## [24] &quot;Burundi&quot; ## [25] &quot;Benin&quot; ## [26] &quot;Saint Barthélemy&quot; ## [27] &quot;Bermuda&quot; ## [28] &quot;Brunei&quot; ## [29] &quot;Bolivia&quot; ## [30] &quot;Bonaire&quot; ## [31] &quot;Brazil&quot; ## [32] &quot;Bahamas&quot; ## [33] &quot;Bhutan&quot; ## [34] &quot;Bouvet Island&quot; ## [35] &quot;Botswana&quot; ## [36] &quot;Belarus&quot; ## [37] &quot;Belize&quot; ## [38] &quot;Canada&quot; ## [39] &quot;Cocos [Keeling] Islands&quot; ## [40] &quot;Democratic Republic of the Congo&quot; ## [41] &quot;Central African Republic&quot; ## [42] &quot;Republic of the Congo&quot; ## [43] &quot;Switzerland&quot; ## [44] &quot;Ivory Coast&quot; ## [45] &quot;Cook Islands&quot; ## [46] &quot;Chile&quot; ## [47] &quot;Cameroon&quot; ## [48] &quot;China&quot; ## [49] &quot;Colombia&quot; ## [50] &quot;Costa Rica&quot; ## [ reached getOption(&quot;max.print&quot;) -- omitted 200 entries ] Similarly, let’s scrape the capitals: read_html(&quot;https://www.scrapethissite.com/pages/simple/&quot;) |&gt; html_elements(&quot;.country-capital&quot;) |&gt; html_text(trim = TRUE) ## [1] &quot;Andorra la Vella&quot; &quot;Abu Dhabi&quot; &quot;Kabul&quot; ## [4] &quot;St. John&#39;s&quot; &quot;The Valley&quot; &quot;Tirana&quot; ## [7] &quot;Yerevan&quot; &quot;Luanda&quot; &quot;None&quot; ## [10] &quot;Buenos Aires&quot; &quot;Pago Pago&quot; &quot;Vienna&quot; ## [13] &quot;Canberra&quot; &quot;Oranjestad&quot; &quot;Mariehamn&quot; ## [16] &quot;Baku&quot; &quot;Sarajevo&quot; &quot;Bridgetown&quot; ## [19] &quot;Dhaka&quot; &quot;Brussels&quot; &quot;Ouagadougou&quot; ## [22] &quot;Sofia&quot; &quot;Manama&quot; &quot;Bujumbura&quot; ## [25] &quot;Porto-Novo&quot; &quot;Gustavia&quot; &quot;Hamilton&quot; ## [28] &quot;Bandar Seri Begawan&quot; &quot;Sucre&quot; &quot;Kralendijk&quot; ## [31] &quot;Brasília&quot; &quot;Nassau&quot; &quot;Thimphu&quot; ## [34] &quot;None&quot; &quot;Gaborone&quot; &quot;Minsk&quot; ## [37] &quot;Belmopan&quot; &quot;Ottawa&quot; &quot;West Island&quot; ## [40] &quot;Kinshasa&quot; &quot;Bangui&quot; &quot;Brazzaville&quot; ## [43] &quot;Bern&quot; &quot;Yamoussoukro&quot; &quot;Avarua&quot; ## [46] &quot;Santiago&quot; &quot;Yaoundé&quot; &quot;Beijing&quot; ## [49] &quot;Bogotá&quot; &quot;San José&quot; ## [ reached getOption(&quot;max.print&quot;) -- omitted 200 entries ] Now we can put all the information about the countries and their capitals in the same dataset: # Put it all in a dataframe countries_data &lt;- data.frame( &quot;names&quot; = read_html(&quot;https://www.scrapethissite.com/pages/simple/&quot;) |&gt; html_elements(&quot;.country-name&quot;) |&gt; html_text(trim = TRUE), &quot;capitals&quot; = read_html(&quot;https://www.scrapethissite.com/pages/simple/&quot;) |&gt; html_elements(&quot;.country-capital&quot;) |&gt; html_text(trim = TRUE)) countries_data 12.2.2.1 Try it! Scrape the population and area for each country then calculate the population density. Which countries have the highest population density in the world? # Write and submit code here! # Put it all in a dataframe countries_data &lt;- data.frame( &quot;names&quot; = read_html(&quot;https://www.scrapethissite.com/pages/simple/&quot;) |&gt; html_elements(&quot;.country-name&quot;) |&gt; html_text(trim = TRUE), &quot;population&quot; = read_html(&quot;https://www.scrapethissite.com/pages/simple/&quot;) |&gt; html_elements(&quot;.country-population&quot;) |&gt; html_text(trim = TRUE), &quot;area&quot; = read_html(&quot;https://www.scrapethissite.com/pages/simple/&quot;) |&gt; html_elements(&quot;.country-area&quot;) |&gt; html_text(trim = TRUE)) |&gt; mutate(density = round(as.numeric(population)/as.numeric(area), 0)) countries_data |&gt; slice_max(density, n = 10) Write sentences here. 12.2.3 More examples of scraping Try scraping these: Austin Date Ideas Travel destinations # Austin date ideas read_html(&quot;https://mycurlyadventures.com/fun-austin-date-night-ideas/&quot;) |&gt; html_elements(&quot;.adhesion_desktop , h3&quot;) |&gt; html_text() ## [1] &quot;Grab a Margarita with a View&quot; ## [2] &quot;Stroll Through Zilker Botanical Gardens&quot; ## [3] &quot;Book a Sunset River Cruise&quot; ## [4] &quot;Enjoy a Spa Day&quot; ## [5] &quot;Learn to Give a Good Massage&quot; ## [6] &quot;Visit the Symphony&quot; ## [7] &quot;Catch a Dance Show&quot; ## [8] &quot;Visit NYC&quot; ## [9] &quot;Go Sailing&quot; ## [10] &quot;See Austin from the Sky&quot; ## [11] &quot;Go Back in Time &quot; ## [12] &quot;Listen to Live Jazz&quot; ## [13] &quot;Visit the Opera &quot; ## [14] &quot;Check Out The Austin Aquarium&quot; ## [15] &quot;Try a Chef’s Tasting&quot; ## [16] &quot;Or Go For a 20-course Omakase&quot; ## [17] &quot;Cruise in a Cool Car&quot; ## [18] &quot;Relax in a Cave&quot; ## [19] &quot;Go for a Picnic&quot; ## [20] &quot;Go on a Wellness Retreat&quot; ## [21] &quot;Go for a Brunch or Dinner Cruise&quot; ## [22] &quot;Take a Friday Moonlight Cruise&quot; ## [23] &quot;Enjoy a Romantic Meal&quot; ## [24] &quot;Book More Spa Time&quot; ## [25] &quot;Plan a Staycation&quot; ## [26] &quot;Go on a Wine Tour&quot; ## [27] &quot;Visit the Umlauf Sculpture Garden &amp; Museum&quot; ## [28] &quot;Plan a Day Trip/Weekend Getaway&quot; ## [29] &quot;Escape the Box&quot; ## [30] &quot;Best Date Ideas: Things to Do in Austin on the Water&quot; ## [31] &quot;Best Date Ideas: Active Things to Do in Austin&quot; ## [32] &quot;Best Date Ideas: Fun Things to Do in Austin&quot; ## [33] &quot;Best Date Ideas: Romantic Things to Do in Austin for Art &amp; History Lovers&quot; ## [34] &quot;Best Date Ideas: Things to Do for Foodies in Austin&quot; ## [35] &quot;Best Date Ideas: Unique Things to Do in Austin&quot; ## [36] &quot;Best Date Ideas: Free Things to Do in Austin&quot; ## [37] &quot;Where should I go on a date in Austin?&quot; ## [38] &quot;Is Austin Texas good for dating?&quot; # Travel destinations read_html(&quot;https://www.forbes.com/sites/laurabegleybloom/2019/09/04/bucket-list-travel-the-top-50-places-in-the-world/?sh=248d064820cf&quot;) |&gt; html_elements(&quot;strong&quot;) |&gt; html_text() ## [1] &quot;1. Bali, Indonesia: &quot; ## [2] &quot;2. New Orleans:&quot; ## [3] &quot;3. Kerry, Ireland:&quot; ## [4] &quot;4. Marrakesh, Morocco: &quot; ## [5] &quot;5. Sydney:&quot; ## [6] &quot;6. The Maldives:&quot; ## [7] &quot;7. Paris, France:&quot; ## [8] &quot;8. Cape Town, South Africa:&quot; ## [9] &quot;9. Dubai, U.A.E.:&quot; ## [10] &quot;10. Bora Bora, French Polynesia:&quot; ## [11] &quot;11. New York: &quot; ## [12] &quot;12. Dubrovnik, Croatia:&quot; ## [13] &quot;13. Edinburgh, Scotland:&quot; ## [14] &quot;14. Rome, Italy:&quot; ## [15] &quot;15. Paro Valley, Bhutan:&quot; ## [16] &quot;16. Jaipur, India:&quot; ## [17] &quot;17. Waikato, New Zealand:&quot; ## [18] &quot;18. Havana, Cuba:&quot; ## [19] &quot;19. Tokyo, Japan: &quot; ## [20] &quot;20. Antarctica: &quot; ## [21] &quot;21. Vancouver, Canada: &quot; ## [22] &quot;22. Los Angeles:&quot; ## [23] &quot;23. Kruger National Park, South Africa:&quot; ## [24] &quot;24. Santorini, Greece:&quot; ## [25] &quot;25. Moscow, Russia:&quot; ## [26] &quot;26. Singapore&quot; ## [27] &quot;27. London, England:&quot; ## [28] &quot;28. Rio de Janeiro, Brazil:&quot; ## [29] &quot;29. Petra, Jordan:&quot; ## [30] &quot;30. Hong Kong:&quot; ## [31] &quot;31. Barbados:&quot; ## [32] &quot;32. Amsterdam:&quot; ## [33] &quot;33. Santiago, Chile:&quot; ## [34] &quot;34. Cairo, Egypt:&quot; ## [35] &quot;35. Copenhagen, Denmark:&quot; ## [36] &quot;36. Seoul, Korea: &quot; ## [37] &quot;37. Laucala Island Resort, Fiji:&quot; ## [38] &quot;38. Providencia, Colombia:&quot; ## [39] &quot;39. Machu Picchu, Peru:&quot; ## [40] &quot;40. Virunga National Park, Democratic Republic of Congo:&quot; ## [41] &quot;41. Lisbon, Portugal:&quot; ## [42] &quot;42. Hanoi, Vietnam:&quot; ## [43] &quot;43. Hawaii:&quot; ## [44] &quot;44. Ibiza, Spain:&quot; ## [45] &quot;45. Beijing, China:&quot; ## [46] &quot;46. Budapest, Hungary:&quot; ## [47] &quot;47. Cinque Terre, Italy:&quot; ## [48] &quot;48. Buenos Aires, Argentina:&quot; ## [49] &quot;49. Las Vegas:&quot; ## [50] &quot;50: Matterhorn, Switzerland:&quot; 12.3 Datasets formats Other researchers might use different software with their own file extensions. For common ones, there’s likely already a package that can be used to import them into R. Download the tamu_scholarships.sas7bdat file from this GitHub. This file is from SAS (a popular statistical analysis software) and can be imported easily: # Submit this code only once: #install.packages(&#39;sas7bdat&#39;) # Upload library library(sas7bdat) # Import SAS dataset tamu &lt;- read.sas7bdat(&#39;tamu_scholarships.sas7bdat&#39;) head(tamu) 12.3.0.1 Try it! Find the top 10 majors in terms of the number of students who got a scholarship. # Write and submit code here! Write sentences here. If you encounter a file with a weird extension, look up if there is an existing import function into R. If not, you might need to convert the file using another program before working with it in R. 12.4 Export into csv Once we manipulate our dataset in R, we might be interested in exporting it into a csv file: # Write and submit code here! write_csv(tamu, &quot;tamu.csv&quot;) 12.4.0.1 Try it! Reshape the tamu dataset so that we can find the total amount of the scholarships for each major. Find the top 10 majors in terms of the amount of money awarded by the scholarships. Then export this dataset into a csv file. # Write and submit code here! Write sentences here. "],["13_StringsRegEx.html", "13 Strings and Regular expressions 13.1 Set up 13.2 Strings 13.3 Regular expressions (Regex) 13.4 Group practice", " 13 Strings and Regular expressions In this worksheet, we will: Manipulate and analyze string data using functions from the stringr package Apply regular expressions (RegEx) to identify patterns within strings 13.1 Set up Let’s load tidyverse which contains the stringr package: # Load package library(tidyverse) We will refer to some string objects and also manipulate strings within a dataframe containing information about the MetroBike trips taken on Halloween night 2023 (Oct 31, 6pm until Nov 1, 6am): # Get the dataset from the data portal directly metrobike &lt;- read_csv(&quot;https://data.austintexas.gov/resource/tyfh-5r8s.csv?$query=SELECT%0A%20%20%60trip_id%60%2C%0A%20%20%60membership_type%60%2C%0A%20%20%60bicycle_id%60%2C%0A%20%20%60bike_type%60%2C%0A%20%20%60checkout_datetime%60%2C%0A%20%20%60checkout_date%60%2C%0A%20%20%60checkout_time%60%2C%0A%20%20%60checkout_kiosk_id%60%2C%0A%20%20%60checkout_kiosk%60%2C%0A%20%20%60return_kiosk_id%60%2C%0A%20%20%60return_kiosk%60%2C%0A%20%20%60trip_duration_minutes%60%2C%0A%20%20%60month%60%2C%0A%20%20%60year%60%0AWHERE%0A%20%20%60checkout_datetime%60%0A%20%20%20%20BETWEEN%20%222023-10-31T18%3A00%3A00%22%20%3A%3A%20floating_timestamp%0A%20%20%20%20AND%20%222023-11-01T06%3A00%3A00%22%20%3A%3A%20floating_timestamp&quot;) Take a look at the dataset. Which variables are what we call strings? head(metrobike) Examples: membership, kiosk. Let’s manipulate strings with functions from the stringr package: the name of these functions start with str_. 13.2 Strings Strings are defined with either single quotes ' or double quotes \": 13.2.1 Calculating length The str_length() function can help us find the length of a string: # String length str_length(&quot;abc&quot;) ## [1] 3 # How is that different? str_length(&quot;a b c&quot;) ## [1] 5 We can apply this function to many strings contained in a vector! # String length of a vector str_length(metrobike$membership_type) ## [1] 18 18 18 7 18 18 7 8 18 8 7 18 7 15 18 15 7 18 18 15 18 18 ## [23] 18 18 18 18 18 18 18 18 7 18 18 7 18 18 18 18 18 18 18 18 18 18 ## [45] 8 8 18 18 7 18 ## [ reached getOption(&quot;max.print&quot;) -- omitted 307 entries ] We can also apply this function to create a new variable in a dataframe: metrobike |&gt; # for distinct values distinct(membership_type) |&gt; # Find the length and create a new variable mutate(length_value = str_length(membership_type)) 13.2.2 Combining strings We can use str_c() to combine two or more strings: # Combine strings str_c(&quot;Happy&quot;, &quot;Halloween&quot;, &quot;!&quot;) ## [1] &quot;HappyHalloween!&quot; # By default, no space but we can add the argument sep = str_c(&quot;Happy&quot;, &quot;Halloween&quot;, &quot;!&quot;, sep = &quot; &quot;) ## [1] &quot;Happy Halloween !&quot; 13.2.2.1 Try it! Combine checkout_kiosk with return_kiosk: this information represents the route of a trip! What were the top 5 routes on that Halloween night? # Write and submit code here! metrobike |&gt; mutate(route = str_c(checkout_kiosk, return_kiosk, sep = &quot; &quot;)) |&gt; select(route) |&gt; count(route) |&gt; slice_max(n, n = 5) Write sentences here. What if we want to combine all the values of one vector/variable together in one object? # Use the argument collapse = str_c(c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;), collapse = &quot;&quot;) ## [1] &quot;abc&quot; # Or separate by a comma and a space str_c(c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;), collapse = &quot;, &quot;) ## [1] &quot;a, b, c&quot; We can get all distinct memberships in one object! metrobike |&gt; # for distinct values distinct(membership_type) |&gt; # Pull the city as a vector pull() |&gt; # Collapse all cities together, separated by a comma and a space str_c(collapse = &quot;, &quot;) ## [1] &quot;Student Membership, Local31, Local365, Pay-as-you-ride, Explorer&quot; 13.2.3 Changing cases We can change the strings from lower to uppercase and vice-versa (also use sentence case): # To lower case str_to_lower(&quot;Happy Halloween!&quot;) ## [1] &quot;happy halloween!&quot; # To upper case str_to_upper(&quot;Happy Halloween!&quot;) ## [1] &quot;HAPPY HALLOWEEN!&quot; # To sentence case str_to_sentence(&quot;Happy Halloween!&quot;) ## [1] &quot;Happy halloween!&quot; Especially useful if there are some inconsistencies in the categories of a variable! 13.2.4 Subsetting strings We can focus on a subset of a string with str_sub() (only works with indexing positions though): # Select a position in the string str_sub(&quot;Happy Halloween!&quot;, start = 1, end = 5) ## [1] &quot;Happy&quot; # Or count backwards with - str_sub(&quot;Happy Halloween!&quot;, start = -10, end = -2) ## [1] &quot;Halloween&quot; We can also split a string by finding a separator: # Split given a pattern str_split(&quot;Happy Halloween!&quot;, pattern = &quot; &quot;) ## [[1]] ## [1] &quot;Happy&quot; &quot;Halloween!&quot; Note that the resulting object is called a list and is difficult to manipulate within dataframes. 13.2.5 Finding (exact) matches in strings Let’s start finding patterns in strings! We can find if a pattern occurs in our data with str_detect(): # Detect the matches str_detect(&quot;Halloween&quot;, pattern = &quot;Ha&quot;) ## [1] TRUE 13.2.5.1 Try it! Find how many trips in metrobike were done with a local membership. # Write and submit code here! metrobike |&gt; filter(str_detect(membership_type, &quot;Local&quot;)) |&gt; count() Write sentences here. What if we want to replace a pattern with str_replace(): # Replace the matches str_replace(&quot;Happy Halloween&quot;, pattern = &quot;Happy&quot;, replacement = &quot;Spooky&quot;) ## [1] &quot;Spooky Halloween&quot; 13.3 Regular expressions (Regex) Regular expressions are used to describe patterns in strings. They’re a little weird at first but they can be very useful, especially when we are looking for patterns with some flexibility. 13.3.1 Wildcards Use . to match any character (except a new line): str_detect(c(&quot;Street&quot;, &quot;street&quot;), pattern = &quot;.treet&quot;) ## [1] TRUE TRUE 13.3.2 Anchors Let’s find a match at the beginning of a string with ^ or at the end of a string with $ : metrobike |&gt; # for distinct values distinct(membership_type) |&gt; # Filter membership starting with Local filter(str_detect(membership_type, &quot;^Local&quot;)) metrobike |&gt; # for distinct values distinct(checkout_kiosk) |&gt; # Filter membership starting with Local filter(str_detect(checkout_kiosk, &quot;st$&quot;)) 13.3.3 Flexible patterns To look for certain patterns, we will use []. Here are a few useful patterns: [0-9] matches any digit [ ] matches any single space [abc] matches a, b, or c [a-zA-Z] matches any letter, lower case or upper case [a-zA-Z0-9] matches any alphanumeric character Let’s find any checkout kiosk with a vowel: metrobike |&gt; # for distinct values distinct(checkout_kiosk) |&gt; # Filter cities starting with A or B filter(str_detect(checkout_kiosk, &quot;[aeiou]$&quot;)) 13.3.3.1 Try it! Find how many checkout kiosk start with a number. metrobike |&gt; # for distinct values distinct(checkout_kiosk) |&gt; # Filter cities starting with A or B filter(str_detect(checkout_kiosk, &quot;^[0-9]&quot;)) Write sentences here. 13.3.4 Special characters In regular expressions, some characters have special meanings (e.g., . matches any character, ^ indicates the start of a string, etc.). Sometimes, we may want to search for these special characters themselves rather than their functionality. To do this, we can “escape” them using a backslash (\\). # Actually referring to a quote for a string &#39;\\&#39;&#39; ## [1] &quot;&#39;&quot; The trick is that \\ is a special character itself so we sometimes have to use a few of those \\\\: # Compare these two pieces of code: str_replace_all(&quot;Happy Halloween.&quot;, pattern = &quot;.&quot;, replacement = &quot;!&quot;) ## [1] &quot;!!!!!!!!!!!!!!!!&quot; str_replace_all(&quot;Happy Halloween.&quot;, pattern = &quot;\\\\.&quot;, replacement = &quot;!&quot;) ## [1] &quot;Happy Halloween!&quot; 13.4 Group practice In a group of 3-4 students, investigate the following stories hidden in the metrobike dataset for Halloween night in 2023. The Haunted Hour! A rumor says the busiest checkout hour on Halloween night is exactly at the spookiest time: midnight (00:00). Is this true? # Write and submit code here! The Phantom’s Route! Some ghostly cyclists seem to haunt kiosks, returning the bike to the same kiosk. Can you find which kiosks are haunted? # Write and submit code here! Follow the Spooky Places! Check the article https://do512.com/p/where-to-get-scared-in-austin and retrieve the names of some places to get scared in Austin. Are there any kiosks near one of these places? Hint: one of these hotels is haunted! # Write and submit code here! The Longest Ride! Legend has it that one cyclist took an incredibly long trip across town. Can you find at what time was the bicycle that had the longest ride checked out and specify the route? # Write and submit code here! The Curse of the 13th Ride! A chilling tale says that one bike was cursed after completing exactly 13 trips on Halloween night. Riders mysteriously vanished after using this bike. Can you uncover if the curse is real? # Write and submit code here! The Haunted Path of 6th Street! 6th Street, known for its lively (and perhaps otherworldly) nightlife, may have seen eerie bike trips on Halloween. How many spirits rode the bikes down this ghostly path? # Write and submit code here! Unravel your own spooky story! # Write and submit code here! Share your favorite story on your [group’s slide] (https://docs.google.com/presentation/d/1Jknm_4urUcZmychWMq4u0dd0kpaytJGqqLF8OuqUtBI/edit?usp=sharing) "],["14_LoopsFunctions.html", "14 Loops and Functions 14.1 Loops 14.2 Group Practice 14.3 Functions 14.4 Don’t reinvent the wheel 14.5 Group Practice", " 14 Loops and Functions In this worksheet, we will: Discuss ow to write a for loop to iterate through some process Define the basic structure of functions Include if/else statements to control the flow of loops/functions Consider When loops/functions are or aren’t useful tools Because we always come back to tidyverse: library(tidyverse) 14.1 Loops 14.1.1 Basic for-loops Suppose you want to perform the same task over and over. You can use loops to perform iterative tasks with the following structure: for(i in sequence){ # task } Let’s consider this basic loop: # i takes the value of each element in the sequence 1,2,3,...,5 for(i in 1:5){ print(i) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 Printing is nice but what if we want to save the values generated by the loop into a vector? We would need to initialize such a vector and define each element: # Initialize an empty vector myoutput &lt;- c() # Remember i takes the value of each element in the sequence 1,2,3,...,10 for(i in 1:5){ # so we can use the values of i to index the new vector myoutput[i] &lt;- i # the ith element is i } # Take a look! myoutput ## [1] 1 2 3 4 5 14.1.1.1 Try it! Find the mean of the squares for the numbers 1 through 10. # Write and submit code here! myoutput2 &lt;- c() for (i in 1:10) { myoutput2[i] &lt;- i^2 } mean(myoutput2) ## [1] 38.5 mean((1:10)^2) ## [1] 38.5 We can also define a specific vector (not necessarily numbers!) and go through each element of the vector: # Define a vector basket &lt;- c(&#39;Apple&#39;, &#39;Orange&#39;, &#39;Passion fruit&#39;, &#39;Banana&#39;) # Apply a loop to go through each element of that vector for(fruit in basket){ print(str_length(fruit)) # fruit takes the value of each element in basket } ## [1] 5 ## [1] 6 ## [1] 13 ## [1] 6 We could also create an object to save each length in a vector BUT str_length can apply to vectors so we can just do: # A function already exists for doing that! str_length(basket) ## [1] 5 6 13 6 For-loops could slow down the computation. We prefer vectorization over for-loops since it results in shorter and clearer code. A vectorized function is a function that will apply the same operation on each value of the vectors. 14.1.2 Conditional Statements We can execute some code under certain conditions with the if-else structure: if (condition) { #code to run when condition is TRUE } else { #code to run when condition is FALSE } Let’s try a basic example: # Set value of x x &lt;- 5 # Test if x is less than 5 or not if(x &lt; 5){ print(&quot;This number is less than five!&quot;) } else { print(&quot;This number is at least five!&quot;) } ## [1] &quot;This number is at least five!&quot; Now what if we want to repeat this for several values? Use a for-loop! # What if x was 5 for (i in 1:5) { if(i &lt; 5){ print(&quot;This number is less than five!&quot;) } else { print(&quot;This number is at least five!&quot;) } } ## [1] &quot;This number is less than five!&quot; ## [1] &quot;This number is less than five!&quot; ## [1] &quot;This number is less than five!&quot; ## [1] &quot;This number is less than five!&quot; ## [1] &quot;This number is at least five!&quot; We can add many conditions! if (condition1){ #code to run when condition1 is TRUE code } else if (condition2) { #code to run when condition2 is TRUE code } } else if (condition3) { #code to run when condition3 is TRUE code } } else { #code to run when all conditions are FALSE code } 14.2 Group Practice Consider the following dataset (get more information by running ?msleep in the console): head(msleep) We can obtain the names of the variables into a vector with names: names(msleep) ## [1] &quot;name&quot; &quot;genus&quot; &quot;vore&quot; &quot;order&quot; ## [5] &quot;conservation&quot; &quot;sleep_total&quot; &quot;sleep_rem&quot; &quot;sleep_cycle&quot; ## [9] &quot;awake&quot; &quot;brainwt&quot; &quot;bodywt&quot; Using a for-loop, an if/else statement, and base R plots, make an appropriate plot for numeric variables and another type of plot that is appropriate for categorical variables. # Write code here for(i in names(msleep)){ print(i) } ## [1] &quot;name&quot; ## [1] &quot;genus&quot; ## [1] &quot;vore&quot; ## [1] &quot;order&quot; ## [1] &quot;conservation&quot; ## [1] &quot;sleep_total&quot; ## [1] &quot;sleep_rem&quot; ## [1] &quot;sleep_cycle&quot; ## [1] &quot;awake&quot; ## [1] &quot;brainwt&quot; ## [1] &quot;bodywt&quot; for(variable in msleep){ # if numeric, histogram if(is.numeric(variable)){ hist(variable) } # if categorical, bar plot else if (is.character(variable)) { #code to run when condition2 is TRUE barplot(table(variable)) } } How nice would that be if we could create these basic plots for investigating variables from any datasets? 14.3 Functions Sometimes you will find yourself needing to perform the same operations over and over (like creating appropriate graphs to investigate variables). Functions are another way to perform repetitive tasks. 14.3.1 R functions All of the functions we have used in this course were written by someone and then integrated either into base R or an external package. Because R is open-source, you can check the documentation with ?function or view the source code of any of these functions: View(fivenum) Think of a few of your favorite functions and view the source code: # View some other functions: View(table) If all you see is UseMethod( ), it just means that the function name you specified has different versions for different classes of arguments. You can view all related functions with methods( ): View(mean) methods(mean) View(mean.default) 14.3.2 Our own functions Suppose we want to create our own function to either simplify a process we do often or to share with a collaborator. To write our own functions, we need to: Define the function name and what arguments it will take. Specify the function body and return, enclosed within the function’s {}. Call the function which runs the function after it has been defined. # Structure of a function function_name &lt;- function(arguments){ # perform operations on inputs and produce output body/return } Let’s define a function for finding the sum of two numbers: mysum &lt;- function(x,y){ xplusy &lt;- x + y return(xplusy) } Note that after running this function definition, it appears in the Environment. Now we can call the function: # Find some sums mysum(2,6) ## [1] 8 mysum(1:10,100) ## [1] 101 102 103 104 105 106 107 108 109 110 14.3.2.1 Try it! Using your code from the previous group practice, create a function that makes an appriopate plot for each variable in a dataset depending on its type (numeric/categorical). Test your function with msleep and mtcars. appropriate_plot &lt;- function(dataset){ for(variable in dataset){ # if numeric, histogram if(is.numeric(variable)){ hist(variable) } # if categorical, bar plot else if (is.character(variable)) { #code to run when condition2 is TRUE barplot(table(variable)) } } } appropriate_plot(mtcars) 14.4 Don’t reinvent the wheel There are many built-in functions in R that can make your programming easier. Look up the documentation or search forums to see if a function already exists before you build it. One example for applying a function to all variables in the dataset: # Check out sapply sapply(msleep[, sapply(msleep, is.numeric)], mean, na.rm = TRUE) ## sleep_total sleep_rem sleep_cycle awake brainwt ## 10.4337349 1.8754098 0.4395833 13.5674699 0.2815814 ## bodywt ## 166.1363494 One example for creating univariate graphs for each variable in a dataset using a new package: # Install a new package install.packages(&quot;DataExplorer&quot;) # Load the library library(DataExplorer) # Plot dataset structure with appropriate graphs for each variable plot_bar(msleep) plot_histogram(msleep) 14.5 Group Practice Consider the following dataset (get more information by running ?quakes in the console): head(quakes) Suppose we want to find out what feature of an earthquake can impact its magnitude. Create a plot to compare each variable in quakes to the magnitude, mag. Which variable seems to have the strongest relationship with magnitude? # Write code here Define each variable in the dataset, except mag, as a categorical variable with low/high values: a low value refers to a value below the median for that variable, a high value refers to a value above the median for that variable. Call them variablename_cat. # Write code here Create a plot to compare each categorical variable to the magnitude. Which variable shows the largest difference in magnitude between low and high values? # Write code here Select the plots for what you think is 1) the best numeric variable associated with magnitude, 2) the best categorical variable showing differences in magnitude. Share them on your [group’s slide] (https://docs.google.com/presentation/d/1ZgCYrh-aSaPenIRh8I_oHvbHuWBfCWGOSB9ZbCTrG-M/edit?usp=sharing) "],["15_Halloween.html", "15 Halloween candy 15.1 Set up 15.2 Exploring relationships 15.3 Group Practice 15.4 Machine Learning", " 15 Halloween candy In this worksheet, we will discuss how to predict the values of a variable (outcome/response/dependent variable) based on some other variable(s) (predictor/explanatory/independent variable). 15.1 Set up We will use the tidyverse package as always: # Load packages library(tidyverse) We will work with the data from the following article: Hickey, W. (2007). The Ultimate Halloween Candy Power Ranking. FiveThirtyEight. https://fivethirtyeight.com/videos/the-ultimate-halloween-candy-power-ranking/ # Upload data from GitHub candy &lt;- read_csv(&quot;https://raw.githubusercontent.com/laylaguyot/datasets/main//Halloween-candy.csv&quot;) # Take a quick look head(candy) This dataset is the result of an experiment: “Pit dozens of fun-sized candy varietals against one another, and let the wisdom of the crowd decide which one was best. While we don’t know who exactly voted, we do know this: 8,371 different IP addresses voted on about 269,000 randomly generated matchups.” Here are the top 19 winners: We are interested on determining what features of the candy might affect its win percentage. In that case, what is the outcome? What do you think could be a good predictor? Outcome is win percentage, predictors are sugar/chocolate/price… 15.1.0.1 Try it! There is one variable that would not be helpful as a predictor. Which one? # Write and submit code here! head(candy) Not competitor name: it’s too specific. 15.1.0.2 Try it! There are two ghosts in this dataset: two observations that are not actually candies! Remove them from the dataset. candy &lt;- candy |&gt; filter(sugarpercent != 0.011) candy &lt;- candy |&gt; filter(!str_detect(competitorname, pattern = &quot;^One&quot;)) Write sentences here! 15.2 Exploring relationships We can visually inspect if there is a relationship between a potential predictor and the outcome. 15.3 Group Practice Each group member picks the predictor that they think would best relate to the win percentage of a candy. Use a plot to represent the relationship between winpercent and the predictor with an appropriate graph. Does there appear to be a relationship to predict the win percentage? # Write code here Write sentences here! Now represent the relationship between winpercent and each potential predictor with an appropriate graph. Which predictor(s) seem to have the strongest relationship with the win percentage? # Write code here Write sentences here! 15.4 Machine Learning Machine learning involves using algorithms to uncover patterns in data and make predictions based on those patterns. There are different types of algorithms for machine learning that fall into 3 categories: We focus on the main two types: supervised vs unsupervised learning. Here are some fundamental machine learning algorithms: linear and logistic regression for modeling relationships and predicting outcomes k-nearest neighbors (kNN) for classifying data points by similarity decision trees for making decisions based on feature splits clustering for grouping similar data points principal component analysis (PCA) for reducing dimensionality and visualizing complex data By applying these algorithms to the Halloween candy dataset, we can see how different candy characteristics can influence popularity, gaining insights into how each technique approaches learning from data and making predictions. "],["16_Simulation.html", "16 Simulations 16.1 Generating random numbers 16.2 Some applications of simulations", " 16 Simulations In this worksheet, we will: Discuss R’s random number generating capabilities. Build some common probability distributions. Use loops and random number generation to simulate random events. Because we always come back to tidyverse at some point: library(tidyverse) 16.1 Generating random numbers Any software that can produce a “random” process typically relies on a pseudo-random number generator. In R, it is called the Mersenne-Twister, which is considered very good, repeating only once every \\(2^{19,937} - 1\\) iterations. 16.1.1 Random numbers among some values We can use this generator to sample from a given list of values: # Define a list of values x &lt;- 1:10 # Take 1 sample value sample(x, size = 1) ## [1] 4 Did we all get the same thing? Why/Why not? It’s random! We can also get a sample of more than 1 value: # What&#39;s the difference between these two pieces of code? sample(x, size = 5, replace = TRUE) ## [1] 9 1 6 1 7 sample(x, size = 5, replace = FALSE) ## [1] 4 7 1 2 8 Replace = TRUE can have duplicates. Note that we can make sure that we all have the same “random sample”. Let’s use set.seed: # Set a unique seed set.seed(7) # Then run the random process sample(x, size = 3,replace = TRUE) ## [1] 10 3 7 We would have to set the seed each time we want to use a random process. 16.1.2 Random numbers from a probability distribution You will come across common probability distributions (uniform, normal, etc.) throughout the SDS curriculum. Here are some examples: # Uniform distribution of values between 0 and 1 runif(n = 10, min = 0, max = 1) ## [1] 0.79201043 0.34006235 0.97206250 0.16585548 0.45910367 0.17174808 ## [7] 0.23147710 0.77281195 0.09630154 0.45344777 What if we sampled many values and plotted these values with a histogram: # Make a vector of one million values between 0 and 1 x_unif &lt;- runif(n = 1000000, min = 0, max = 1) hist(x_unif, main = &#39;Uniform (0,1) Distribution&#39;) Why does it make sense to see what we see? All values equally likely. Another common distribution is the normal distribution that is defined by a mean value and a standard deviation with a symmetric shape (bell-shaped). # Normal distribution of mean 0 and standard deviation 1 rnorm(n = 10, mean = 0, sd = 1) ## [1] 1.2472739 -1.2330278 -0.8378650 0.8116156 0.4344979 0.9063994 ## [7] 0.6062468 0.4520080 0.3909159 -0.3648308 Representing many values: # Make a vector of one million values between 0 and 1 x_norm &lt;- rnorm(n = 1000000, mean = 0, sd = 1) hist(x_norm, main = &#39;Normal (0,1) Distribution&#39;) You can find all of the probability distributions R can sample from here. 16.1.3 Group practice Let’s consider the following dataset: # Upload data from GitHub pokemon &lt;- read_csv(&quot;https://raw.githubusercontent.com/laylaguyot/datasets/main//pokemon.csv&quot;) # Take a look head(pokemon) In your group, you will: Pick one numeric variable (Total, HP, …, or Speed). Take a look at the distribution of this variable with a histogram and find the value of the mean and standard deviation. # Write code here Take a sample of 30 values of this variable and find the mean. Do all group members get the same mean? How does this mean compare with the overall mean from above? # Write code here Now, repeat the sampling process 100 times: each time, take a sample of 30 values and find the mean. You should get 100 (different) mean values overall! Represent the distribution of these means with an histogram and find then find the mean (of the means!). How does this mean compare with the overall mean from way above? # Write code here Share both histograms (of the entire variable and of the means) along with the values of the means on your [group’s slide] (https://docs.google.com/presentation/d/1v_0h8w1YspWKaKt5K1CYiewiokwMyjETLVJBTm0AUEw/edit?usp=sharing) You just demonstrated an important theorem in probability, called the Central Limit Theorem! 16.2 Some applications of simulations We can use simulations to help us investigate probabilities. 16.2.1 Rolling dice Let’s start with an intuitive example, like rolling dice: set.seed(313) # This is a roll sample(x = 1:6, size = 1) ## [1] 4 What was the probability of rolling a 4? 1/6 What if we roll the dice 10 times: # Roll the dice and check how many times it happened myrolls &lt;- sample(x = 1:6, size = 10, replace = TRUE) barplot(table(myrolls)) What appears to be the probability of rolling a 4 given these results? 2/10 What if we roll the dice 5,000 times: # Roll the dice and check how many times it happened myrolls &lt;- sample(x = 1:6, size = 5000, replace = TRUE) barplot(table(myrolls)) table(myrolls) ## myrolls ## 1 2 3 4 5 6 ## 826 809 852 843 831 839 843/5000 ## [1] 0.1686 What appears to be the probability of rolling a 4 given these results? 800/5000 Let’s keep track of the probability of rolling a 4 as we roll the dice many times (using a loop!): # Initialize values for rolls and probabilities myrolls &lt;- c() myprob &lt;- c() for (i in 1:5000) { myrolls[i] &lt;- sample(x = 1:6, size = 1) # roll 1 die myprob[i] &lt;- sum(myrolls == 4)/i # divide how many times we rolled a 4 by how many times we rolled } plot(1:5000, myprob, type = &#39;l&#39;, xlab = &quot;Number of rolls&quot;) abline(h = 1/6, lty = 2, col = &#39;red&#39;) What do you notice about the probability of rolling a 4 as the number of rolls increases? Write sentences here. You just demonstrated an important theorem in probability, called the Law of Large Numbers! It is especially useful when the probability itself is not easy to determine but we could repeat an experiment a large number of times. 16.2.2 Birthday problem What is the probability that at least 2 people in the room today share the same birthday? This question does not have an easy answer. But let’s use a simulation to explore: # Create a vector representing all possible birthdays birthdays = 1:365 # Pick 40 birthdays (uniformly = with an equal chance and with replacement), at random mybirthdays &lt;- sample(birthdays, size = 40, replace = TRUE) # Are there any doubles? any(table(mybirthdays) &gt; 1) # If TRUE, then at least two students have the same birthday ## [1] TRUE Do we just get that result by chance? 16.2.2.1 Try it! Repeat the process above 5,000 times and find out how many times 2 out of 40 students did share a birthday. # Initiate shared_birthday &lt;- c() for(i in 1:5000){ mybirthdays &lt;- sample(birthdays, size = 42, replace = TRUE) # Are there any doubles? shared_birthday[i] &lt;- any(table(mybirthdays) &gt; 1) } table(shared_birthday) ## shared_birthday ## FALSE TRUE ## 444 4556 barplot(table(shared_birthday)) mean(shared_birthday) ## [1] 0.9112 "],["17_ShinyBasics.html", "17 Shiny Basics 17.1 Shiny App Gallery 17.2 Basic Structure of a Shiny App", " 17 Shiny Basics In this worksheet, we will: Explore what Shiny Apps can do. Define the basic structure of Shiny Apps. Build some simple Shiny Apps. 17.1 Shiny App Gallery Shiny is a way to build web-based apps that allow users to interact with R in some way. Let’s start by taking a look at some really nice (and complicated) examples: Pick 2 or 3 of the apps from the Shiny Gallery to play around with. Try interacting with all of the possible options. What happens when you change values or select different options? For each app you explored, list one functionality that you found especially interesting below: slider (changing values) interactive map (clicking on some points to get data) filter some categories (check on/off) changing colors/opacity on a map updated data every 15 minutes (NY transportation) 17.2 Basic Structure of a Shiny App 17.2.1 Components Shiny apps all have three basic components (don’t run the code below - I’ve included it just to show you the outline of an app): ui &lt;- ... # 1. user interface server &lt;- function( ) { # 2. server function ... } shinyApp(...) # 3. call to run the app We’ll start by building the user interface section, which is where you set the layout of the page (title, sidebars, panes, etc.) and define user inputs through widgets, which we’ll see later today. 17.2.2 Group practice Open up the “Hello_App.R” to see an example. Make the following changes to “Hello_App.R” Hint: use the documentation to look up anything you need that we haven’t covered yet! Update the title of the shiny app to your name. Center the title of the side bar, change it to read “My favorite book,” and add a line break before displaying the title and author of your favorite book. Change the title of the main panel to read “Book description” in italics and in a different color. Then write a short 1-2 sentence summary of the book in a different font. Here are some more examples of basic Shiny apps: runExample(&quot;01_hello&quot;) # a histogram runExample(&quot;02_text&quot;) # tables and data frames runExample(&quot;03_reactivity&quot;) # a reactive expression runExample(&quot;04_mpg&quot;) # global variables runExample(&quot;05_sliders&quot;) # slider bars runExample(&quot;06_tabsets&quot;) # tabbed panels runExample(&quot;07_widgets&quot;) # help text and submit buttons runExample(&quot;08_html&quot;) # Shiny app built from HTML runExample(&quot;09_upload&quot;) # file upload wizard runExample(&quot;10_download&quot;) # file download wizard runExample(&quot;11_timer&quot;) # an automated timer 17.2.3 Reactive output Now let’s incorporate the ability for our Shiny app to produce reactive output, which means that an output will changed based on a selection by the user. To do this, we’ll need to: Add widgets to our user interface. Update the server function to render the output we want based on input from the widgets. Here are some common widgets: 17.2.4 Group practice Open up the “Widget_App.R” to see an example. Change the radio buttons for starting values to have 5 options that are different than the current ones. Include both negative and positive values. Instead of choosing a number to add to the starting value, update the select box to have three options of numbers to multiply by the starting values. Update all relevant text in the app as well as the output. 17.2.5 Project 3 Your final project for the course is going to be building a Shiny app. Take a minute now to read over the instructions for Project 3 to see what you are going to be required to do. "],["18_ShinyWithData.html", "18 Shiny with Data 18.1 More on the Shiny structure 18.2 Interact with a dataset 18.3 Adding a choice for selecting variables 18.4 Hosting your app on the web 18.5 Summary", " 18 Shiny with Data In this worksheet, we will: See more examples of widgets with reactive output. Use a Shiny app to interact with a dataset. Host a Shiny app on the web. 18.1 More on the Shiny structure Recall that Shiny apps all have three basic components as shown below: ui &lt;- ... # 1. user interface server &lt;- function( ) { # 2. server function ... } shinyApp(...) # 3. call to run the app 18.1.1 User interface The user interface, ui, controls the layout and appearance of the app: add titles, text, images, and other HTML elements. We define the input of the app with widgets for example. # Define UI ui &lt;- fluidPage( # Add overall title titlePanel(&quot;title of the app&quot;), # Define a side bar layout with a main panel sidebarLayout( # Define the side bar sidebarPanel( # Add some radio buttons radioButtons(inputId = &quot;buttons&quot;, , label = h3(&quot;title of the buttons&quot;), choices = list(&quot;first choice label&quot; = 1, &quot;second choice label&quot; = 2), selected = 1), # value selected by default ), # end of side bar options # Define the main panel mainPanel(h3(&quot;title of the panel&quot;), p(&#39;text in the panel&#39;), plotOutput(&quot;name_output&quot;), img(src = &#39;www/shiny.svg&#39;) ) ) ) 18.1.2 Server The server function contains the instructions needed to build the app: that’s where we will have R code to produce an output based on any input information (for example, create a plot based on values of buttons). # Define server function required to produce an output server &lt;- function(input, output) { # Use renderPlot to define the output plot and indicate that: # 1. This object is &quot;reactive&quot;: automatically re-executed when inputs change # 2. Its output type is a plot output$name_output &lt;- renderPlot({ # Execute code for each conditions for each input button if (input$buttons == 1){ barplot(table(input$buttons)) } else if (input$buttons == 2){ hist(input$buttons) } }) } 18.1.3 Run the app Finally the shinyApp function creates Shiny app objects from an explicit ui/server pair. # To run the app shinyApp(ui = ui, server = server) 18.1.3.1 Try it! Open a new R file. Combine the three sections in the code chunks above and run the app. There should be an error with the second button. Can you fix it? 18.2 Interact with a dataset Now that we can see how some basic R code can run in the app, let’s see how we can use one to interact with a dataset. Note: Make sure your dataset is saved in the same folder as your app. 18.2.1 Group practice Open up the Films_App.R to see an example. Run the app. Does it work? If not, why? Look at the message in the console. On which row(s), does the app define which variable to analyze? Change it to another variable. Add another check box that if selected, would also display the standard deviation of this variable. 18.3 Adding a choice for selecting variables Let’s say we want to add some functionality to this app and allow the user to select between the Days and Budget variables. What would we need to update in our app to allow for this? Some radio buttons for choosing a variable. Output for each variable (if/else if). 18.3.1 Group practice Keep editing Films_App.R: Add the option to choose between the two variables, Days and Budget. Depending on the variable, make a histogram with appropriate labels. Depending on the variable, calculate the corresponding mean and standard deviation. 18.4 Hosting your app on the web For Project 3, you will make an app that is accessible through the web. There are several ways to do this, but Posit allows you to streamline up to 5 apps for free. Create a free account using your gmail or Github credentials, or set up a separate log-in. Once you sign in, you’ll see your shinyapps.io dashboard which will walk you through the steps to launch your first app: install.packages(&#39;rsconnect&#39;) # Copy/paste the authorization code from the dashboard and run it here: # Update your file path below to launch your app! library(rsconnect) rsconnect::deployApp(&#39;path/to/your/app&#39;) 18.5 Summary To create your own Shiny app: Make a directory/folder named myapp for your app. Save your app.R script inside that directory. Launch the app with Run App. Deploy your app online! Refer to the tutorial for Shiny Basics for step-by-step details. "],["Bookdown.html", "19 Bookdown 19.1 Set up bookdown 19.2 Organize your files 19.3 Edit the index 19.4 Edit the bookdown 19.5 Edit the output 19.6 Build the book! 19.7 Resources", " 19 Bookdown 19.1 Set up bookdown Ensure the bookdown package is installed: install.packages(&quot;bookdown&quot;) Then load it into your R session: library(bookdown) Create a new Bookdown project: Go to File &gt; New Project &gt; New Directory &gt; Book Project using bookdown. Choose a directory name for your project and click Create Project. These two steps will generate a basic Bookdown template. 19.2 Organize your files We need to copy all files we want to include in our book in the project folder. That includes .Rmd files but also datasets like .csv files. I recommend renaming your files as follows for the daily worksheets: 02_VisualizingData.Rmd 03_MoreVisualization.Rmd 04_RMarkdown.Rmd 05_MoreRMarkdown.Rmd 06_DataWrangling.Rmd 07_MoreDataWrangling.Rmd 08_RelationalData.Rmd 09_DatesTimes.Rmd 10_ReshapingData.Rmd 11_Reproducibility.Rmd 12_OnlineData.Rmd 13_StringsRegEx.Rmd 14_LoopsFunctions.Rmd 15_Halloween.Rmd 16_Simulation.Rmd 17_ShinyBasics.Rmd 18_ShinyWithData.Rmd You can also choose to include your assignments! Most importantly, you will need to do some cleanup for each file: get rid of the yaml code at the beginning of each worksheet and include the title as the first level header with # (this header will indicate the name of each chapter). get rid of the numbering of the outlines (the sections will be numbered automatically). get rid of any install.packages or View() in the code chunks OR include eval=FALSE in {r}. get rid of the code chunk name global_options in {r} in 05, 08, 09, 10 above. make sure each dataset used in a worksheet is available in the book folder. knit each worksheet individually and check they are error free. 19.3 Edit the index The index.Rmd file serves as the front page of your book. Update it with your book’s title, author, and other information. Here is what I included in mine: --- title: &quot;Your Custom Book Title&quot; author: &quot;Your Name&quot; date: &quot;`r Sys.Date()`&quot; site: bookdown::bookdown_site output: bookdown::gitbook: config: toc: collapse: true search: true --- # Welcome to SDS 313 This is the combination of all my notes for SDS 313! 19.4 Edit the bookdown Include all the .Rmd files you want to see in your book in the _bookdown.yml file! For example, mine looks like this: rmd_files: - index.Rmd - 02_VisualizingData.Rmd - 03_MoreVisualization.Rmd - 04_RMarkdown.Rmd - 05_MoreRMarkdown.Rmd - 06_DataWrangling.Rmd - 07_MoreDataWrangling.Rmd - 08_RelationalData.Rmd - 09_DatesTimes.Rmd - 10_ReshapingData.Rmd - 11_Reproducibility.Rmd - 12_OnlineData.Rmd - 13_StringsRegEx.Rmd - 14_LoopsFunctions.Rmd - 15_Halloween.Rmd - 16_Simulation.Rmd - 17_ShinyBasics.Rmd - 18_ShinyWithData.Rmd Again, you can choose to include your assignments (either between chapters, or at the end). 19.5 Edit the output In the _output.yml file, I only edited the name of the book: &lt;li&gt;&lt;a href=&quot;./&quot;&gt;My SDS 313 Book&lt;/a&gt;&lt;/li&gt; 19.6 Build the book! In RStudio, you can use the Build Book button in the Build tab, or run the following in your console: bookdown::render_book(&quot;index.Rmd&quot;, &quot;bookdown::gitbook&quot;) 19.7 Resources This is the official guide and provides detailed explanations and examples. A practical introduction by RStudio. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
